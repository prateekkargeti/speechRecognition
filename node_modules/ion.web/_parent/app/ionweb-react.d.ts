/// <reference path="core.ui.d.ts" />
/// <reference path="charts.ui.d.ts" />
/// <reference path="shell.ui.d.ts" />
/// <reference path="toolkit.d.ts" />
declare module ionwebreact {
}
declare module "ionweb-react/ToAngular" {
    import * as React from "react";
    /**
     * Basic props interface to be extended for all wrappers.
     * This will give all common properties.
     */
    export interface IWrapperProps {
        /**
         * Class list to be applied to the element
         */
        className?: string;
        /**
         * Inline style to be applied to the element
         */
        style?: React.CSSProperties;
        /**
         * Callback fired every time a two-way bindable property has been changed.
         */
        onPropUpdate?: (prop: string, newValue: any, oldValue: any) => void;
    }
    /**
     * React `props` interface for the `ToAngular` class
     */
    export interface IToAngularProps {
        /**
         * Tag directive name to be rendered.
         */
        tag: string;
        /**
         * Map of Angular properties name-value to be pass to the Angular directive (names will be converted as dashed-case strings).
         */
        props?: {
            [name: string]: any;
        };
        /**
         * List of Angular property names that needs to be observed using the callback onPropUpdate.
         */
        twoWayProps?: string[];
        /**
         * List of Angular property names that are registered as Angular callback (`&` binding).
         */
        callbackProps?: string[];
        /**
         * Callback fired every time a two-way bindable property has been changed.
         */
        onPropUpdate?: (prop: string, newValue: any, oldValue: any) => void;
        /**
         * Children React.Component to be pass as children of this component.
         */
        children?: any;
    }
    /**
     * Generates an Angular directive and compile it using `react-angular` module.
     *
     * @export
     * @class ToAngular
     * @extends {React.Component}
     */
    export class ToAngular extends React.Component<IToAngularProps> {
        /**
         * Define mapping between React properties and Angular ones
         */
        private static NG_REACT_PROPS;
        /**
         * JSX supported standard attributes
         * https://www.reactenlightenment.com/react-jsx/5.7.html#notes
         */
        private static JSX_ATTRS;
        /**
         * Angular controller
         */
        private ctrl;
        /**
         * Compiler service
         */
        private $compile;
        /**
         * HTML Element endpoint managed by Angular
         */
        private $element;
        /**
         * HTML element scope
         */
        private $scope;
        /**
         * Creates an instance of ToAngular.
         * @param {IToAngularProps} props
         */
        constructor(props: IToAngularProps);
        /**
         * Returns Angular properties from `props` input.
         */
        private getNgProps(props);
        private evaluateContent(props);
        /**
         * When a property (component's input) has been updated
         * we need to update the Angular controller inside the wrapper
         */
        componentWillReceiveProps(props: IToAngularProps): void;
        /**
         * First time, listen for Angular properties update in order to raise `onPropUpdate` method to the React parent
         * Note: React built-in method
         */
        componentDidMount(): void;
        /**
         * Destructor
         * Note: React built-in method
         */
        componentWillUnmount(): void;
        shouldComponentUpdate(nextProps: IToAngularProps): boolean;
        private toDashCase(value);
        private toCamelCase(value);
        /**
         * Component rendering
         * Note: React built-in method
         */
        render(): React.DOMElement<{
            [attr: string]: any;
        }, Element>;
    }
    export default ToAngular;
}
declare module "ionweb-react/Autocomplete" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IAutocompleteProps extends IWrapperProps {
        ngModel?: string | string[];
        options?: any;
        placeholder?: string;
        multiple?: boolean;
        disabled?: boolean;
        ngDisabled?: boolean;
        valueField?: string;
        labelField?: string;
        searchField?: string;
        showArrowButton?: boolean;
        showClearButton?: boolean;
        showUserButton?: boolean;
        userButtonIcon?: string;
        showFooter?: boolean;
        allowFreeText?: boolean;
        autofocus?: boolean;
        limit?: number;
        scopeOptions?: ionweb.toolkit.IAutocompleteScopeOptions;
        disableCache?: boolean;
        validationState?: ionweb.validation.ValidationState;
        validationMessage?: string;
        errorAnimation?: boolean;
        tabindex?: number;
        optionProvider?: ionweb.toolkit.IOptionProviderFunction;
        queryOptions?: ionweb.toolkit.IAutocompleteQueryOptions;
        editable?: boolean;
        disableDefaultSorting?: boolean;
        allowEmptyValue?: boolean;
        key?: string;
        reloadOnModelChange?: boolean;
        optionTemplate?: string;
        optionTemplateItemName?: string;
        showSelectedOptions?: boolean;
        enableSelectAll?: boolean;
        selectAllSummaryText?: string;
        footerOptions?: ionweb.toolkit.IFooterOptions;
        userButtonAction?: () => void;
        onTextChange?: (arg: {
            value: string;
        }) => void;
        onFocus?: () => void;
        onBlur?: () => void;
        validatePaste?: (arg: {
            value: string;
        }) => boolean | Q.IPromise<boolean>;
    }
    /**
     * Wrapper of `ionweb-autocomplete` directive
     * https://confluence.iontrading.com/display/RD/The+Autocomplete+Box
     */
    export class Autocomplete extends React.PureComponent<IAutocompleteProps> {
        private twoWayProps;
        private callbackProps;
        render(): JSX.Element;
    }
}
declare module "ionweb-react/Button" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IButtonProps extends IWrapperProps {
        role?: string;
        color?: string;
        icon?: string;
        iconColor?: string;
        iconPlacement?: string;
        disabled?: boolean;
        ngDisabled?: boolean;
        onClick?: () => void;
    }
    /**
     * Wrapper of `ionweb-button` directive
     * https://confluence.iontrading.com/display/RD/The+IonButton
     */
    export class Button extends React.PureComponent<IButtonProps> {
        render(): JSX.Element;
    }
}
declare module "ionweb-react/Chart" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IChartProps extends IWrapperProps {
        data: ionweb.tables.IDataModel | any;
        layout: ionweb.charts.ChartLayout;
        feedback?: ionweb.charts.ChartRendererFeedback;
        renderer?: string;
    }
    /**
     * Wrapper of `ionweb-chart` directive
     * https://confluence.iontrading.com/display/RD/Charts
     */
    export class Chart extends React.PureComponent<IChartProps> {
        private ngProps;
        constructor(props: IChartProps);
        render(): JSX.Element;
    }
}
declare module "ionweb-react/Checkbox" {
    import * as React from "react";
    export interface ICheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {
        inline?: boolean;
    }
    /**
     * Wrapper of `input[type=checkbox]` field
     */
    export class Checkbox extends React.PureComponent<ICheckboxProps> {
        render(): JSX.Element;
    }
}
declare module "ionweb-react/DateTimeEntryBox" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IDateTimeEntryBoxProps extends IWrapperProps {
        ngModel: Date | ionweb.toolkit.IDateTimeTag;
        datepickerOptions?: ionweb.toolkit.IDatePickerOptions;
        timepickerOptions?: ionweb.toolkit.ITimePickerOptions;
        mode?: ionweb.toolkit.DateTimePickerMode;
        dateTimeTags?: ionweb.toolkit.IDateTimeTag[];
        numberOfTagColumns?: number;
        useDateTimeTags?: boolean;
        tagsHeaderText?: string;
        compact?: boolean;
        autofocus?: boolean;
        isOpen?: boolean;
        closeOnDateSelection?: boolean;
        placeholder?: string;
        textAlign?: string;
        disabled?: boolean;
        ngDisabled?: boolean;
        editable?: boolean;
        showClearButton?: boolean;
        showArrowButton?: boolean;
        tabindex?: number;
        showTagInline?: boolean;
        styleForInlineTag?: (tag: ionweb.toolkit.IDateTimeTag) => ionweb.toolkit.IDateTimeTagStyle;
        validationState?: ionweb.validation.ValidationState;
        validationMessage?: string;
        refresh?: () => void;
        onBind?: (dateTimePicker: ionweb.toolkit.IDateTimePicker) => void;
        onDateUpdated?: (changedDate: Date | ionweb.toolkit.IDateTimeTag, defaultFormattedDate: string) => string;
        onValueUpdate?: (value: string) => Date | ionweb.toolkit.IDateTimeTag | ng.IPromise<Date | ionweb.toolkit.IDateTimeTag>;
    }
    /**
     * Wrapper of `ionweb-date-time-entry-box` directive
     * https://confluence.iontrading.com/display/RD/Date+Time+Picker#DateTimePicker-DateTimeEntryBox
     */
    export class DateTimeEntryBox extends React.PureComponent<IDateTimeEntryBoxProps> {
        private twoWayProps;
        render(): JSX.Element;
    }
}
declare module "ionweb-react/DateTimePicker" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IDateTimePickerProps extends IWrapperProps {
        ngModel: Date | ionweb.toolkit.IDateTimeTag;
        datepickerOptions?: ionweb.toolkit.IDatePickerOptions;
        timepickerOptions?: ionweb.toolkit.ITimePickerOptions;
        mode?: ionweb.toolkit.DateTimePickerMode;
        dateTimeTags?: ionweb.toolkit.IDateTimeTag[];
        numberOfTagColumns?: number;
        useDateTimeTags?: boolean;
        tagsHeaderText?: string;
        compact?: boolean;
        hideTagPanel?: boolean;
        headerOptions?: ionweb.toolkit.IDateTimeHeaderOptions;
        refresh?: () => void;
        onBind?: (dateTimePicker: ionweb.toolkit.IDateTimePicker) => void;
    }
    /**
     * Wrapper of `ionweb-date-time-picker` directive
     * https://confluence.iontrading.com/display/RD/Date+Time+Picker#DateTimePicker-DateTimePicker
     */
    export class DateTimePicker extends React.PureComponent<IDateTimePickerProps> {
        private twoWayProps;
        render(): JSX.Element;
    }
}
declare module "ionweb-react/DateTimePickerPopup" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IDateTimePickerPopupProps extends IWrapperProps {
        ngModel: Date | ionweb.toolkit.IDateTimeTag;
        datepickerOptions?: ionweb.toolkit.IDatePickerOptions;
        timepickerOptions?: ionweb.toolkit.ITimePickerOptions;
        mode?: ionweb.toolkit.DateTimePickerMode;
        dateTimeTags?: ionweb.toolkit.IDateTimeTag[];
        numberOfTagColumns?: number;
        useDateTimeTags?: boolean;
        tagsHeaderText?: string;
        compact?: boolean;
        isOpen?: boolean;
        closeOnDateSelection?: boolean;
        showPopupOnKeydown: boolean;
        refresh?: () => void;
        onBind?: (dateTimePicker: ionweb.toolkit.IDateTimePicker) => void;
    }
    /**
     * Wrapper of `ionweb-date-time-picker-popup` directive
     * https://confluence.iontrading.com/display/RD/Date+Time+Picker#DateTimePicker-DateTimePickerPopup
     */
    export class DateTimePickerPopup extends React.PureComponent<IDateTimePickerPopupProps> {
        private ngProps;
        private twoWayProps;
        constructor(props: IDateTimePickerPopupProps);
        render(): JSX.Element;
    }
}
declare module "ionweb-react/NumericUpDown" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface INumericUpDownProps extends IWrapperProps {
        ngModel?: number;
        disabled?: boolean;
        ngDisabled?: boolean;
        tick?: number;
        minValue?: number;
        maxValue?: number;
        showSpinner?: boolean;
        spinnerPosition?: ionweb.toolkit.SpinnerPosition;
        spinnerDisabled?: boolean;
        showToolBar?: boolean;
        spinModeEnabled?: boolean;
        topToolBar?: ionweb.toolkit.INumericUpDownToolBarButton[] | number[];
        bottomToolBar?: ionweb.toolkit.INumericUpDownToolBarButton[] | number[];
        upIconName?: string;
        downIconName?: string;
        model?: ionweb.toolkit.INumericUpDownModel;
        validationState?: ionweb.validation.ValidationState;
        validationMessage?: string;
        useDefaultModifiers?: boolean;
        placeholder?: string;
        tabindex?: number;
        onModifierKeyPress?: (key: string, textBoxValue: number) => boolean | number;
        onValueCommit?: Function;
        onInvalidValue?: (value: string) => number;
        onCurrentValueChange?: Function;
        spinnerSize?: string;
        fontSize?: string;
        toolbarFontSize?: string;
        toolbarHeight?: string;
        placeholderAlign?: string;
        autofocus?: boolean;
    }
    /**
     * Wrapper of `ionweb-numeric-up-down` directive
     * https://confluence.iontrading.com/display/RD/Numeric+Up+Down
     */
    export class NumericUpDown extends React.PureComponent<INumericUpDownProps> {
        private twoWayProps;
        private callbackProps;
        render(): JSX.Element;
    }
}
declare module "ionweb-react/Radio" {
    import * as React from "react";
    export interface IRadioProps extends React.InputHTMLAttributes<HTMLInputElement> {
        inline?: boolean;
    }
    /**
     * Wrapper of `input[type=radio]` field
     */
    export class Radio extends React.PureComponent<IRadioProps> {
        render(): JSX.Element;
    }
}
declare module "ionweb-react/Grid" {
    import * as React from "react";
    import { IWrapperProps } from "ionweb-react/ToAngular";
    export interface IGridProps extends IWrapperProps {
        data: ionweb.tables.IDataModel | any;
        options?: ionweb.tables.IGridScopeOptions;
    }
    /**
     * Wrapper of `ionweb-grid` directive
     * https://confluence.iontrading.com/display/RD/Grid
     */
    export class Grid extends React.PureComponent<IGridProps> {
        render(): JSX.Element;
    }
}
declare module "ionweb-react/Validation" {
    import * as React from "react";
    export interface IValidationProps {
        state?: ionweb.validation.ValidationState;
        message?: string;
    }
    /**
     * Wrapper of `ionweb-validation` directive
     * https://confluence.iontrading.com/display/RD/Controls+validation
     */
    export class Validation extends React.PureComponent<IValidationProps> {
        private $element;
        private $scope;
        private $compile;
        private evaluateContent;
        componentWillUnmount(): void;
        render(): React.DOMElement<any, Element>;
    }
}
declare module "ionweb-react" {
    import "ngreact";
    export const toTemplate: (component: string | React.ComponentClass<any> | React.StatelessComponent<any>) => string;
    export * from "ionweb-react/ToAngular";
    export * from "ionweb-react/Autocomplete";
    export * from "ionweb-react/Button";
    export * from "ionweb-react/Chart";
    export * from "ionweb-react/Checkbox";
    export * from "ionweb-react/DateTimeEntryBox";
    export * from "ionweb-react/DateTimePicker";
    export * from "ionweb-react/DateTimePickerPopup";
    export * from "ionweb-react/NumericUpDown";
    export * from "ionweb-react/Radio";
    export * from "ionweb-react/Grid";
    export * from "ionweb-react/Validation";
}
