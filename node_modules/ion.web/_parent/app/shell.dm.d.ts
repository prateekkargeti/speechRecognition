/// <reference path="core.d.ts" />
/// <reference path="storages.d.ts" />

declare namespace ionweb {
}
declare namespace ionweb {
    /**
     * Path of a storage-based dashboard
     */
    interface IDashboardPath {
        /**
         * Path of the dashboard. If an array, one item for level, starting from the root. If a single string, the '/' can be used as a separator.
         */
        path: string | string[];
        /**
         * True if part of the shared tree, otherwise private (default)
         */
        shared?: boolean;
    }
    /**
     * General descriptor of a dashboard in relationship of the workspace. See IDashboardService.fetch().
     */
    interface IDashboardInfo {
        /**
         * The unique ID of the dashboard.
         */
        readonly id: string;
        /**
         * The name of the dashboard.
         */
        readonly name: string;
        /**
         * The description of the dashboard.
         */
        readonly description?: string;
        /**
         * The tags associated to the dashboard.
         */
        readonly tags?: string[];
        /**
         * Non-empty string if the dashboard is a link to another dashboard (i.e. the private placeholder for a shared owned dashboard).
         * In that case this is the ID of the linked dashboard.
         */
        readonly isLink?: string;
        /**
         * Is the dashboard defined by the application? (see IRegistry.registerDashboard)
         */
        readonly isAppDefined?: boolean;
        /**
         * The path of the dashboard in the workspace
         */
        readonly itemPath?: IDashboardPath;
    }
    /**
     * Manager for dashboards (service name: 'ionweb.dashboardService')
     */
    interface IDashboardService {
        /**
         * Get the global enabled flag for the dashboard sub-system.
         */
        isEnabled: boolean;
        /**
         * Get the map of opened dashboards
         */
        dashboards: {
            [id: string]: IDashboard;
        };
        /**
         * Get the list of opened dashboards
         */
        dashboardList: IDashboard[];
        /**
         * Find the dashboard that contains the given component, recursively.
         */
        findParent(component: IComponent): IDashboard;
        /**
         * Fetch the complete tree of available dashboards list from the server.
         * Requires communication to the ION.WEB server (potentially slow).
         * @returns A list of dashboard info objects. The tree can be rebuilt or filtered using the path.
         */
        fetchDashboards(): Q.Promise<IDashboardInfo[]>;
        /**
         * Clone a source dashboard (in the server or application-defined) in the user's private space.
         * If the target folder already contains a dashboard with the same name, a new name will be used automatically (with a counter suffix).
         * @param id the id of the dashboard to clone
         * @param targetPath if specified clone the dashboard in the given path. The path should contains the new dashboard name as well. Any intermediate
         * folder should exist. If not specified, it clones the source dashboard in the private root, using the same dashboard name.
         * @returns the id of the new dashboard
         */
        cloneDashboard(id: string, opts?: {
            targetPath?: IDashboardPath;
        }): Q.Promise<string>;
    }
    /**
     * Type of IDashboardDefinition entity
     */
    enum DashboardDefinitionType {
        /**
         * The definition is of a dashboard (default)
         */
        Dashboard = 0,
        /**
         * The definition is of a widget state
         */
        WidgetState = 1,
    }
    /**
     * Descriptor for a application-defined dashboard (or widget with state)
     */
    interface IDashboardDefinition {
        /**
         * The display name of the dashboard
         */
        displayName: string;
        /**
         * The optional descripion
         */
        description?: string;
        /**
         * Optional user tags, for searching in the catalog and home screen.
         */
        tags?: string[];
        /**
         * The type of the dashboard definition (by default is Dashboard). Can be WidgetState (for widgets).
         */
        type?: DashboardDefinitionType;
        /**
         * The group/category. By default 'Samples' will be used (as a generic sample dashboard).
         * To be able to use sub-categorization use categoryPath instead.
         */
        category?: string;
        /**
         * The group/category as path. If specified, the category property will be ignored.
         */
        categoryPath?: string[];
        /**
         * The category icon to use. By default, the sample icon will be used (paired with the default 'Samples' category)
         */
        categoryIcon?: string;
        /**
         * The dashboard serializable content (the storage content). If null, the dashboard will be created empty, or you can specify the url
         * using registerDashboardUrl instead.
         */
        content?: Object;
        /**
         * Can be the dashboard used as a startup dashboard when no dashboards are opened? Not valid for component states.
         */
        isDefault?: boolean;
        /**
         * Dashboard controller string name (serializable) or explicit function (non-serializable).
         * Optionally creates a Angular controller that surround the whole dashboard, giving the possibility to share scope properties between components.
         * The "as" syntax will be used, the aliased name will be 'dashCtrl'.
         * In order to use strict annotation, use the additional $inject property (see https://docs.angularjs.org/api/auto/service/$injector)
         * When a controller is given, no actions will be exposed to the user (e.g. clone, edit, add/remove components, edit mode, etc...)
         */
        controllerFunction?: Function | string;
        /**
         * If type is WidgetState, the component type id.
         */
        componentTypeId?: string;
        /**
         * If set, hide the dashboard definition from the UI (i.e. not listed in the Home screen, etc..)
         */
        isInternal?: boolean;
    }
    /**
     * Layout information for a component
     */
    interface IComponentLayout {
        /**
         * New width in root view percentage (0, 1]. Leave undefined to use the default value.
         */
        width?: number;
        /**
         * New height in pixels. Leave undefined to use the default value.
         */
        height?: number;
        /**
         * Left position in root view percentage (0, 1]. Leave undefined to use the default value (first available place).
         */
        left?: number;
        /**
         * Top position in pixel. Leave undefined to use the default value (first available place).
         */
        top?: number;
        /**
         * When used as input, if specified, all the other properties will be ignored and the component will be tabbed with another component with the given id.
         * If empty string, the component will be undocked.
         */
        tabWith?: string;
    }
    /**
     * A live dashboard instance. It supports dashboard-level preferences.
     */
    interface IDashboard {
        /**
         * Get the dashboard unique id
         */
        readonly id: string;
        /**
         * Close the dashboard, if it was created by the application through the openDashboard() or openDashboardClone() call.
         */
        close(): void;
        /**
         * Raised when the id changes.
         */
        readonly idChanged: IEvent<{
            newId: string;
            oldId: string;
        }>;
        /**
         * Raised when the dashboard was reloaded.
         */
        readonly reloaded: IEvent<void>;
        /**
         * Enumerates the current nested component in the dashboard (first level only).
         */
        readonly components: IComponent[];
        /**
         * The list of components changed
         */
        readonly componentsChanged: IEvent<void>;
        /**
         * Provider for dashboard-level preferences.
         * Please note that the property key 'layout' is reserved and internally used by the SDK.
         */
        readonly preferenceProvider: IPreferenceProvider;
        /**
         * Provider for dashboard-level user prefereces. User preferences are not stored alongside the dashboard (that can be shared) but at a user level (e.g. local storage).
         */
        readonly userPreferenceProvider: IPreferenceProvider;
        /**
         * @deprecated Please use the addSidePanelTab function
         * Angular template of the left side panel. Setting this will make it visible.
         */
        sidePanelTemplateUrl?: string;
        /**
         * @deprecated Please use the addSidePanelTab function
         * Angular template of the right side panel. Setting this will make it visible.
         */
        rightPanelTemplateUrl?: string;
        /**
         * @deprecated Please use the addSidePanelTab function
         * Angular template of the top panel. Setting this will make it visible.
         */
        topPanelTemplateUrl?: string;
        /**
         * @deprecated Please use the addSidePanelTab function
         * Angular template of the bottom panel. Setting this will make it visible.
         */
        bottomPanelTemplateUrl?: string;
        /**
         * Get or set the Active Component, if there's one.
         */
        activeComponent: IComponent;
        /**
         * Raised when the activeComponent changes.
         */
        readonly activeComponentChanged: IEvent<void>;
        /**
         * Check if the dashboard is currently active one (on front)
         */
        readonly active: boolean;
        /**
         * Event raised when the active flag changes.
         */
        readonly activeChanged: IEvent<void>;
        /**
         * Brings the specified component to front, if tabbed.
         */
        bringToFront(component: IComponent): void;
        /**
         * Get the current layout of an existing component. If tabbed, returns the layout of the containing tab.
         */
        getComponentLayout(component: IComponent): IComponentLayout;
        /**
         * Change the layout of an existing component. If tabbed, it changes the layout of all tabbed components.
         * If 'tabWith' is specified but empty, the component will be undocked and the other parameters will be used for the new position.
         */
        setComponentLayout(component: IComponent, layout: IComponentLayout): void;
        /**
         * Promise that will be fullfilled when the dashboard is fully initialized and the component creation API can be safely used.
         */
        readonly initialized: Q.Promise<void>;
        /**
         * Event raised when the layout of the current dashboards changes (e.g. some components moved/resized)
         */
        readonly layoutChanged: IEvent<void>;
        /**
         * Create a new component of the given type and layout it. Optionally give a title to it.
         * @param componentTypeId the type id of the component to create
         * @param title an optional component title (by default the component type display name will be used)
         * @param layout the layout to use for the new component.
         */
        createComponent(componentTypeId: string, title?: string, layout?: IComponentLayout): IComponent;
        /**
         * Clone an existing component in the current dashboard and returns the instance of the cloned component.
         * You can specify an optional layout for the new component, otherwise it will be created in the first available space
         */
        cloneComponent(component: IComponent, layout?: IComponentLayout): IComponent;
        /**
         * Is the dashboard in edit mode?
         */
        readonly editMode: boolean;
        /**
         * Is the edit mode flag changed?
         */
        readonly editModeChanged: IEvent<void>;
        /**
         * Event raised when the dashboard is closed
         */
        readonly closed: IEvent<void>;
        /**
         * Get the dashboard display name
         */
        readonly displayName: string;
        /**
         * Event raised when the dashboard display name changes (e.g. when renamed)
         */
        readonly displayNameChanged: IEvent<{
            newValue: string;
            oldValue: string;
        }>;
        /**
         * Change the display name of the dashboard and rename it in the remote storage as well. The operation is equivalent to renaming it from the UI.
         * The promise returns error if the dashboard cannot be renamed (e.g. lack of rights, invalid name, etc..)
         * The promise returns the new name if everything is successful.
         * @param newName the required new display name
         */
        setDisplayName(newName: string): Q.Promise<string>;
        /**
         * Get the group/category of the dashboard (when applicable)
         */
        readonly category?: string;
        /**
         * Event raised when the group/category of the dashboard changed (when applicable)
         */
        readonly categoryChanged: IEvent<{
            newValue: string;
            oldValue: string;
        }>;
        /**
         * Get the dashboard storage path (when applicable)
         */
        readonly path?: IDashboardPath;
        /**
         * Get the current count of columns (e.g. 24)
         */
        readonly columnCount: number;
        /**
         * Get the current height of a row in pixels (25px)
         */
        readonly rowSize: number;
        /**
         * Get/set the header visibility flag. It can be observed with Angular watch.
         */
        showHeaders: boolean;
        /**
         * Get/set the compact mode flag. It can be observed with Angular watch.
         */
        compactMode: boolean;
        /**
         * Get/set the dashboard in order to have widget height fitting all available space (no extra bottom space or scrollbar will be shown)
         */
        fillHeightMode: boolean;
    }
}
declare namespace ionweb {
    /**
     * Local SDK configuration, section 'shell'. Can be overridden by ION.WEB server.
     */
    interface IShellConfig {
        /**
         * List of dashboards to load at startup if no other dashboards are loaded.
         */
        defaultDashboards?: (IDashboardPathConfig | string)[];
        /**
         * Set of pre-defined workspaces. Each workspace is a list of existing dashboard. In order to load a workspace see 'loadWorkspace'.
         */
        workspaces?: {
            [key: string]: (IDashboardPathConfig | string)[];
        };
        /**
         * Disable the automatic reopening of last used dashboards.
         */
        disableLastDashboards?: boolean;
        /**
         * Lock the workspace limiting the actions the user can do. By default this means that it will not
         * possible to create local dashboards, edit dashboards, import/export dashboards, show history, etc...
         * If used with 'loadWorkspace', the Home screen will not be accessible and it will not possible to close dashboards.
         */
        lockedWorkspace?: boolean;
        /**
         * Force loading a predefined list of dashboards, defined by the 'workspaces' setting.
         * If 'lockedWorkspace' is used as well, the Home screen will not be accessible and it will not possible to close dashboards; this will internally set 'disableLastDashboards' too.
         */
        loadWorkspace?: string;
    }
    /**
     * Used to configure dashboards to be loaded at startup in the config file
     */
    interface IDashboardPathConfig {
        /**
         * Path of the dashboard. If an array, one item for level, starting from the root. If a single string, the '/' can be used as a separator.
         */
        path: string | string[];
        /**
         * True if the search should happen in the private tree, otherwise shared (default)
         */
        private?: boolean;
        /**
         * If set, forces the dashboard to be the active one at startup.
         */
        active?: boolean;
        /**
         * If set, forces the dashboard to be loaded even if other dashboards are already part of the workspace
         */
        forced?: boolean;
        /**
         * The path of the 'source' dashboard to use when the path doesn't exists.
         * In this case the source dashboard will be cloned and then maintained 'linked' to observe changes and notify the user (at startup) when
         * the source dashboard changes.
         */
        sourcePath?: string | string[] | {
            path: string | string[];
            private?: boolean;
        };
    }
}
declare namespace ionweb {
}
declare namespace ionweb {
    /**
     * If set to true, specific preference is hidden else shown. By default all preferences are shown.
     */
    interface IPreferenceConfig {
        [key: string]: boolean | undefined;
    }
    /**
     * General Preference Tab Config.
     */
    interface IGeneralPreferenceConfig extends IPreferenceConfig {
        /**
         * If set to true, theme preference is hidden.
         */
        hideThemePreference?: boolean;
        /**
         * If set to true, density preference is hidden.
         */
        hideDensityPreference?: boolean;
        /**
         * If set to true, option to configure 'Show reset-multi-sorting confirmation dialog' is hidden.
         */
        hideResetMultiSortingConfirmationDialogPreferences?: boolean;
        /**
         * If set to true, option to configure 'Start edit on next cell automatically' is hidden.
         */
        hideAutoEditPreferences?: boolean;
        /**
         * If set to true, option to configure 'Show multiple notifications' is hidden.
         */
        hideMultipleNotificationsPreferences?: boolean;
        /**
         * If set to true, option to configure 'Show widget maximize button' is hidden.
         */
        hideWidgetMaximizeButtonPreferences?: boolean;
    }
    /**
     * Date and Time Tab Config.
     */
    interface IDateTimePreferenceConfig extends IPreferenceConfig {
        /**
         * If set to true, short format preference is hidden.
         */
        hideShortFormatPreference?: boolean;
        /**
         * If set to true, long format preference is hidden.
         */
        hideLongFormatPreference?: boolean;
        /**
         * If set to true, range separator preference is hidden.
         */
        hideRangeSeparatorPreference?: boolean;
    }
    /**
     * Language Tab Config.
     */
    interface ILanguagePreferenceConfig extends IPreferenceConfig {
        /**
         * If set to true, language preference is hidden.
         */
        hideLanguagePreference?: boolean;
    }
    /**
     * Number Tab Config.
     */
    interface INumberPreferenceConfig extends IPreferenceConfig {
        /**
         * If set to true, number preference is hidden.
         */
        hideNumberPreference?: boolean;
    }
    /**
     * Preference dialog config to show or hide entire tab or individual preference in given tab.
     */
    interface IPreferenceDialogConfig {
        /**
         * General preference tab config.
         * If set it to true, tab is hidden else shown. By default tab is shown.
         * If set to IGeneralPreferenceConfig, specified preference is hidden. By default all preferences are shown.
         */
        hideGeneralPreferences?: boolean | IGeneralPreferenceConfig;
        /**
         * Date preference tab config.
         * If set it to true, tab is hidden else shown. By default tab is shown.
         * If set to IDateTimePreferenceConfig, specified preference is hidden. By default all preferences are shown.
         */
        hideDatePreferences?: boolean | IDateTimePreferenceConfig;
        /**
         * Time preference tab config.
         * If set it to true, tab is hidden else shown. By default tab is shown.
         * If set to IDateTimePreferenceConfig, specified preference is hidden. By default all preferences are shown.
         */
        hideTimePreferences?: boolean | IDateTimePreferenceConfig;
        /**
         * Language preference tab config.
         * If set it to true, tab is hidden else shown. By default tab is shown.
         * If set to ILanguagePreferenceConfig, specified preference is hidden. By default all preferences are shown.
         */
        hideLanguagePreferences?: boolean | ILanguagePreferenceConfig;
        /**
         * Number preference tab config.
         * If set it to true, tab is hidden else shown. By default tab is shown.
         * If set to INumberPreferenceConfig, specified preference is hidden. By default all preferences are shown.
         */
        hideNumberPreferences?: boolean | INumberPreferenceConfig;
    }
    interface IPreferenceTab {
        /**
         * tab title
         */
        title: string;
        /**
         * template Url
         */
        templateUrl: string;
        /**
         * Specify which preferences are hidden. By default all are shown.
         */
        hiddenPreferences?: string[];
    }
    interface IPreferenceDialogService {
        /**
         * Update the preference dialog config.
         * @param moduleKey The module for which config is provided.
         * @param config The preference dialog config. Pass null to reset config for given module.
         */
        updateConfig(moduleKey: string, config: IPreferenceDialogConfig): void;
        /**
         * Add custom tab.
         * @param tab The custom prefernce tab to add.
         */
        addTab(tab: IPreferenceTab): void;
        /**
         * Remove custom tab.
         * @param tab The IPreferenceTab tab object or title.
         */
        removeTab(tab: IPreferenceTab | string): void;
        /**
         * Set preference changed.
         */
        setPreferenceChanged(): void;
        /**
         * Raised when preference changes are applied.
         */
        preferenceApplied: IEvent<void>;
        /**
         * Is the preference dialog disabled? (read-only)
         * Preference dialog is disabled and will not be shown when all tabs in it are hidden, i.e. when preference tabs added by SDK and custom tabs added by application are hidden.
         */
        isDisabled: boolean;
        /**
         * Raised when disabled state is changed.
         */
        onPreferenceDialogDisabledChanged: IEvent<void>;
    }
}
declare namespace ionweb {
}
declare namespace ionweb.shell {
}
