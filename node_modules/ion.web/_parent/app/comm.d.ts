
/// <reference path="server.d.ts" />
declare namespace ionweb.comm {
}
declare namespace ionweb {
    /**
     * Function to convert PSH DATE into javascript  Date instance
     */
    function pshDateToJsDate(pshDate: number): Date;
    /**
     * Function to convert PSH DATE into javascript  Date instance
     */
    function pshTimeToJsDate(pshTime: number): Date;
    /**
     * Type of subscription object
     */
    enum SubscriptionType {
        Record = 1,
        Chain = 2,
        ChainRecord = 3,
        RecordGroup = 4,
        Queue = 5,
        Pattern = 6,
    }
    /**
     * A subscribed subscription
     */
    interface ISubscription {
        /**
         * Unsubscribe. If already unsubscrbed, do nothing.
         */
        unsubscribe(): void;
        /**
         * Update a field-based subscription, change the subscribed fields.
         */
        updateFields(fields: string[]): void;
        /**
         * Update a record-group subscription, change the record set.
         */
        updateRecords(records: string[]): void;
    }
    /**
     * A bus type can be: an integer, a real, a string or a date/time (integer).
     */
    type FieldValue = string | number;
    /**
     * Options to create a subscription
     */
    interface ISubscriptionOptions {
        /**
         * array of fields, or empty array means "all fields"
         */
        fields?: string[];
        /**
         * the id of the items to subscribe. Can be an array if record Group subscription, or string otherwise
         */
        id: string | string[];
        /**
         * The subscription type
         */
        type: SubscriptionType;
        /**
         * Raised when the object is not present on the bus
         */
        notAvailable?: () => void;
        /**
         * Raised when a record collection is about to be changed / snapshotted
         */
        begin?: () => void;
        /**
         * Raised when a record collection changes is finished
         */
        end?: () => void;
        /**
         * Raised when a new record is added to the record collection
         */
        add?: (id: string, fields: {
            [key: string]: FieldValue;
        }) => void;
        /**
         * Raised when a record is removed from the record collection
         */
        remove?: (id: string) => void;
        /**
         * Raised when a record collection is closed
         */
        close?: () => void;
        /**
         * Raised when a record collection is cleared
         */
        kill?: () => void;
        /**
         * Raised when a record changes
         */
        supply?: (id: string, fields: {
            [key: string]: FieldValue;
        }, isSnapshot: boolean) => void;
        /**
         * Raised when a USER message is received (MQ)
         */
        user?: (id: string, fields: {
            [key: string]: FieldValue;
        }) => void;
        /**
         * Raised the first time a record is received, describe the fields metadata
         */
        metadata?: (metadata: IFieldMetadata[]) => void;
    }
    /**
     * Describe a field meta-data
     */
    interface IFieldMetadata {
        /**
         * Field name
         */
        id: string;
        /**
         * Type of the field. Currently supported: STRING, INT, REAL, TIME or DATE.
         */
        type: string;
    }
    /**
     * Options to create a fcall request
     */
    interface IFunctionOptions extends IFunctionCallArguments {
        /**
         * the name of the fcall to invoke
         */
        name: string;
    }
    /**
     * Interface for function call arguments
     */
    interface IFunctionCallArguments {
        /**
         * Named function arguments
         */
        namedArgs?: {
            [id: string]: FieldValue;
        };
        /**
         * OPTIONAL: set of type names (STRING, INT, REAL, TIME, DATE) to force data types
         */
        namedTypes?: {
            [id: string]: string;
        };
        /**
         * Variadic arguments
         */
        varArgs?: FieldValue[];
        /**
         * Optional type names (STRING, INT, REAL, TIME, DATE) for variadic arguments.
         * If present, the array must contain as many strings as there are parameters, but null is allowed to fall back to the default behavior.
         */
        varTypes?: string[];
    }
    /**
     * Function call result, in case of success
     */
    interface IFunctionResult {
        /**
         * Named results
         */
        values: {
            [id: string]: FieldValue;
        };
        /**
         * Variadic results
         */
        varValues: FieldValue[];
    }
    /**
     * Types of errors
     */
    enum ErrorClass {
        /**
         * The remote components produced the error
         */
        ComponentError = 0,
        /**
         * The ION.WEB server produced the error
         */
        ServerError = 1,
        /**
         * The client SDK produced the error
         */
        ClientError = 2,
    }
    /**
     * Options to create a transaction request
     */
    interface ITransactionOptions {
        /**
         * set of named fields to transact, with the new value
         */
        fields: {
            [name: string]: FieldValue;
        };
        /**
         * the id of the record to transact
         */
        id: string;
        /**
         * OPTIONAL: set of type names (STRING, INT, REAL, TIME, DATE) to force data types
         */
        types?: {
            [name: string]: string;
        };
    }
    /**
     * Function call/transaction result, in case of error
     */
    interface IErrorResult {
        /**
         * Error code of the call.
         */
        code: number;
        /**
         * Error message of the call.
         */
        message: string;
        /**
         * The error source/originator.
         */
        errorClass: ErrorClass;
    }
}
declare namespace ionweb.cm {
    /**
     * Request to SSON a CM market
     */
    interface ISsonMarketCall extends IFunctionCallArguments {
        /**
         * The market CM source
         */
        source: string;
        /**
         * The market CM currency
         */
        currency: string;
    }
    /**
     * Response for a market SSON call
     */
    interface ISsonServiceResponse {
        /**
         * General Outcome
         */
        outcome: boolean;
        /**
         * Details about errors (if outcome is false)
         */
        error?: IErrorResult;
        /**
         * Details about failure (if outcome is false)
         */
        failureDetails?: {
            type?: SsonFailureType;
            message?: string;
        };
        /**
         * Details about every market request
         */
        marketResponses: {
            /**
             * Map between market source and outcome details
             */
            [source: string]: {
                outcome: boolean;
                failureType?: MarketCallFailureType;
                username?: string;
                response?: string;
            };
        };
    }
    /**
     * Market login failure
     */
    enum MarketCallFailureType {
        MarketComponentRegistrationError = 1,
        MarketgenericError = 2,
        AlreadyLogged = 3,
        RegistrationNotFound = 4,
        Timeout = 5,
        MarketNotConfigured = 6,
        GenericException = 7,
    }
    /**
     * Market SSON failure types
     */
    enum SsonFailureType {
        NoServices = 1,
        SsonTimeout = 2,
        UserServicesFunctionError = 3,
        DaemonError = 4,
        GenericException = 5,
    }
}
declare namespace ionweb {
    /**
     * The communication layer interface (service name: ionweb.commService)
     */
    interface ICommService {
        /**
         * Subscribe a ION bus object:
         */
        subscribe(opts: ISubscriptionOptions): ISubscription;
        /**
         * Invoke a single fcall
         * Returns a deferred object with the result. If it fails, it returns an object of type IErrorResult.
         */
        invoke(opts: IFunctionOptions): Q.Promise<IFunctionResult>;
        /**
         * Do a value(s) transaction
         * Returns a deferred object with the result. If it fails, it returns an object of type IErrorResult.
         */
        transact(opts: ITransactionOptions): Q.Promise<void>;
        /**
         * CM Market Login request (SSON)
         */
        ssonLogin(markets: cm.ISsonMarketCall[]): Q.Promise<cm.ISsonServiceResponse>;
        /**
         * CM Market logout request (SSON)
         */
        ssonLogout(markets: cm.ISsonMarketCall[]): Q.Promise<cm.ISsonServiceResponse>;
        /**
         * The Streaming Server metadata, sent via WebSocket protocol (not HTTP), or longpoll if WebSocket is not available
         */
        streamingMetadata: {
            [id: string]: any;
        };
    }
}
/**
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is State Machine Compiler (SMC).
 *
 * The Initial Developer of the Original Code is Charles W. Rapp.
 *
 * Port to JavaScript by Francois Perrad, francois.perrad@gadz.org
 * Copyright 2013, Francois Perrad.
 * All Rights Reserved.
 *
 * Contributor(s):
 *
 * RCS ID
 * Id: statemap.js,v 1.3 2013/12/15 16:30:34 fperrad Exp
 *
 *
 * This module contains two class  :
 * * State
 *    the base State class
 * * FSMContext
 *    the Finite State Machine Context class
 *
 * See: http://smc.sourceforge.net/
 *
 */
declare function State(name?: any, id?: any): void;
declare function FSMContext(startState?: any): void;
declare namespace ionweb {
    /**
     * The config section of the SDK ('shell').
     */
    interface IShellConfig {
        /**
         * Redefine maxNetworkDelay in CometD (default: 60000 ms)
         */
        maxNetworkDelay?: number;
        /**
         * Enable web socket (by default true)
         */
        webSocketsEnabled?: boolean;
    }
}
declare namespace ionweb.comm.entitlement {
    /**
     * Generic By Feature Entitlement query.
     * The interface represent a query for a batch of request of "Generic By Feature" type.
     * Each request contains the path of the resources and the feature to check
     */
    interface IGenericByFeatureQuery {
        /**
         * Adds a request to validate entitlements in the specified namespace to the feature for the selected resource.
         * @param namespace the namespace of the generic-by-feature resource to test
         * @param resources the (generic) path of the generic-by-feature resource to test
         * @param features the path of the feature to test within the specified resource.
         */
        addRequest(namespace: string, resources: string[], features: string[]): void;
        /**
         * Send the generic by feature query
         * @returns An asynchrous return value of type IGenericByFeatureResponse
         */
        send(): Q.Promise<IGenericByFeatureResponse>;
    }
    /**
     * Entitlement Base Response Object
     */
    interface IEntitlementResponse {
        /**
         * Response outcome
         */
        outcome: QueryOutcome;
        /**
         * Error: failure details
         */
        error?: string;
        /**
         * will be true if we got allowed for atleast one item from send list
         */
        wasAllowed: boolean;
    }
    /**
     *  Response of IGenericByFeatureQuery.send.
     */
    interface IGenericByFeatureResponse extends IEntitlementResponse {
        /**
         * list of features allowed on resources
         */
        responseItems: IGenericByFeatureEntitlement[];
    }
    /**
     * Single Item of response containing feature of resource.
     */
    interface IGenericByFeatureEntitlement {
        /**
         * namespace of resource
         */
        namespace: string;
        /**
         * name of resource
         */
        resource: string;
        /**
         * name of feature allowed on resouce
         */
        feature: string;
    }
    /**
     * By Data Entitlement query.
     */
    interface IDataQuery {
        /**
         * List of service query request
         */
        services: Service[];
        /**
         * username for which entitlement query need to send
         */
        username: string;
        /**
         * Send the batched query
         * @returns An asynchrous return value
         */
        send(): Q.Promise<IDataQueryResponse>;
    }
    /**
     * Response of IDataQuery.send()
     */
    interface IDataQueryResponse extends IEntitlementResponse {
        /**
         * List of object which are allowed feature by.
         */
        responseItems: IFlatEntitlementItem[];
    }
    /**
     * A single item of the response of a IDataQuery.send() query
     */
    interface IFlatEntitlementItem {
        /**
         * service for which request was send for feature of object
         */
        serviceType: string;
        /**
         * source of component
         */
        source: string;
        /**
         * container in which request was send
         */
        container: string;
        /**
         * feature allow on object
         */
        feature: string;
        /**
         * name of object which request on entitlement server
         */
        object: string;
    }
    /**
     * Represents outcome value of entitlement response.
     */
    enum QueryOutcome {
        /**
         * No error occurred and a response was received from the Entitlement Server.
         */
        Ok = 0,
        /**
         * The Entitlement Server sent back an empty response.
         */
        EmptyResult = 1,
        /**
         * Entitlement Server didn't reply within a timeout (e.g. not running on the platform).
         */
        NotAvailable = 2,
        /**
         * An error at ION bus level happened, or the Entitlement Server issued a generic error processing the request.
         */
        PermissionError = 3,
        /**
         * An error for which there is no specific error code.
         */
        GenericException = 4,
    }
    /**
     * IEntitlementService provide methods to instantiate data and genericByFeature query
     */
    interface IEntitlementService {
        /**
         * Creates a data query object type.
         * @param username username for which entitlement need to be check
         * @returns IDataQuery. It will provide methods for adding data entitlement services and send request.
         */
        dataQuery(username: string): IDataQuery;
        /**
         * Creates a generic by-feature entitlement query object type.
         * @returns IGenericByFeatureQuery. It will provide methods for adding resource and features in particular namespace and send request.
         */
        genericByFeatureQuery(): IGenericByFeatureQuery;
    }
}
declare namespace ionweb.comm.entitlement {
    /**
     * EntAttribute: contains  entries can be used to carry additional <key,value> parameters that are passed to the entitlement server;
     * the entitlement server will pass them to other component in case of it is not able to calculate the response.
     */
    class EntitlementAttributes {
        /**
         *
         * @returns List of key-pair entries to to pass to entitlement server.
         */
        attributes: {
            [name: string]: string;
        };
        constructor();
    }
    /**
     * Service: contains type, source features, and containers
     */
    class Service extends EntitlementAttributes {
        /**
         *
         * currency name
         */
        serviceType: string;
        /**
         *
         * source of component
         */
        source: string;
        /**
         *
         * list of features for entitlement query.
         */
        features: string[];
        /**
         *
         * list of container containing objects to be send.
         */
        containers: Container[];
        /**
         *
         * @param serviceType currency name
         * @param source component source name
         */
        constructor(serviceType: string, source: string);
    }
    /**
     * Containers: Instrument contains objects/records
     */
    class Container extends EntitlementAttributes {
        /**
         *
         * name of container
         */
        name: string;
        /**
         *
         * list of objects need to be send for entitlement query.
         */
        objects: RecordObject[];
        /**
         *
         * name of container
         */
        constructor(name: string);
    }
    /**
     * RecordObject is a object that need to be send for entitlement query for list of features.
     */
    class RecordObject extends EntitlementAttributes {
        /**
         *
         * name of object
         */
        name: string;
        constructor(name: string);
    }
}
declare namespace ionweb.comm {
}
