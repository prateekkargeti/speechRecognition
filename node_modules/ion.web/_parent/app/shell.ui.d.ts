/// <reference path="../typings/jquery/jquery.d.ts" />
/// <reference path="core.ui.d.ts" />
/// <reference path="shell.dm.d.ts" />
/// <reference path="login.ui.d.ts" />
/// <reference path="grids.ui.d.ts" />
/// <reference path="cm.d.ts" />
/// <reference path="comm.d.ts" />
/// <reference path="storages.d.ts" />
/// <reference path="toolkit.d.ts" />
declare module ionweb {
}
declare namespace ionweb {
    /**
     * This property will show the number configuration options as per the state set, default is all true.
     */
    interface INumberFormatting {
        /**
         * Show decimal places config in preference. true by default.
         */
        showDecimalPlacesConfig?: boolean;
        /**
         * Show negative braces config in preference. true by default.
         */
        showNegativeBracesConfig?: boolean;
        /**
         * Show decimal symbol config in preference. true by default.
         */
        showDecimalSymbolConfig?: boolean;
        /**
         * Show digit grouping symbol config in preference. true by default.
         */
        showDigitGroupingSymbolConfig?: boolean;
    }
    /**
     * Common config settings for dashboard and widget.
     */
    interface IDashboardModeConfig {
        /**
         * Disable the add widget dialog button from the navigation bar, enabled by default. When disabled, the widgets will be added only through context menu.
         */
        disableAddWidgetDialog?: boolean;
        /**
         * Disable the rename dashboard feature, enabled by default. Disabling rename will disable the double click to rename feature and the context menu item.
         */
        disableDashboardRename?: boolean;
        /**
         * Disable the import dashboard feature, enabled by default.
         */
        disableDashboardImport?: boolean;
        /**
         * Disable the popout dashboard feature, enabled by default.
         */
        disableDashboardPopout?: boolean;
        /**
         * Disable the "Make my own copy" dashboard feature, enabled by default.
         */
        disableDashboardCopy?: boolean;
        /**
         * Disable access to the dashboard history view, enabled by default.
         */
        disableDashboardHistoryView?: boolean;
        /**
         * Disable the dashboard download locally as file, enabled by default.
         */
        disableDashboardDownload?: boolean;
        /**
         * Disable the dashboard lock layout feature, enabled by default.
         */
        disableDashboardLockLayout?: boolean;
        /**
         * Disable the dashboard compact mode feature, enabled by default.
         */
        disableDashboardCompactMode?: boolean;
        /**
         * Disable the dashboard fit to browser window feature, enabled by default.
         */
        disableDashboardFitToBrowser?: boolean;
        /**
         * Disable the rename widget feature, enabled by default.
         */
        disableWidgetRename?: boolean;
        /**
         * Disable the maximize widget feature, enabled by default. Disabling maximize will remove the disable checkmark from preference dialog.
         */
        disableWidgetMaximize?: boolean;
        /**
         * Disable the copy/paste widget feature, enabled by default.
         */
        disableWidgetCopyPasteConfig?: boolean;
        /**
         * Disable the clone widget feature, enabled by default.
         */
        disableWidgetClone?: boolean;
        /**
         * Disable the "save" widget on cloud feature, enabled by default.
         */
        disableWidgetSave?: boolean;
        /**
         * Disable the widget download locally as file, enabled by default.
         */
        disableWidgetDownload?: boolean;
        /**
         * Disable the caption style configuration, enabled by default.
         */
        disableWidgetCaptionStyle?: boolean;
        /**
         * Disable the caption visibility configuration, enabled by default. Disabling this will remove the per-dashboard setting and per-widget overrides menus as well
         */
        disableWidgetCaptionVisibility?: boolean;
        /**
         * Use inline add widget selector instead of the whole Home screen.
         * If set to 'favorites', filter for favorites view only.
         */
        inlineAddWidget?: boolean | "favorites";
    }
    /**
     * Local SDK configuration, section 'shell'. Can be overridden by ION.WEB server.
     */
    interface IShellConfig {
        /**
         * Show main menu (by default true)
         */
        enableMainMenu?: boolean;
        /**
         * Hide menu entry from toolbar. (by default false)
         */
        hideMainMenu?: boolean;
        /**
         * Hide saving information entry from toolbar. (by default false)
         */
        hideSavingInformation?: boolean;
        /**
         * Hide user status information from toolbar. (by default false)
         */
        hideStatusInformation?: boolean;
        /**
         * Show component creation menu (by default true)
         */
        enableComponentCreationMenu?: boolean;
        /**
         * When set, enable the feedback feature. By default the feedback feature is enabled.
         */
        enableUserFeedback?: boolean;
        /**
         * When set, enable the auto hide mode. By default the mode is not auto-hide
         */
        userFeedbackAutoHide?: boolean;
        /**
         * When true, feedback button will be shown.
         */
        showUserFeedbackButton?: boolean;
        /**
         * When set, specify the URL to send the feedback.
         */
        userFeedbackUrl?: string;
        /**
         * Common config settings for dashboard and widget.
         */
        dashboardModeConfig?: IDashboardModeConfig;
    }
}
declare namespace ionweb {
    /**
     * The toolbar item position.
     */
    enum ToolbarItemPlacement {
        /**
         * The toolbar item will be placed on left.
         */
        Left = 0,
        /**
         * The toolbar item will be placed on right.
         */
        Right = 1,
    }
    /**
     * The toolbar item interface.
     */
    interface IToolbarItem {
        /**
         * The template of the toolbar item.
         */
        template?: string;
        /**
         * The template url of the toolbar item.
         */
        templateUrl?: string;
        /**
         * Get/set the toolbar item placement.
         */
        placement: ToolbarItemPlacement;
    }
    /**
     * The toolbar service interface.
     */
    interface IToolbarService {
        /**
         * Add item to toolbar.
         * @param template The template for the toolbar item.
         * @param [placement = left] The toolbar item placement.
         * @returns IToolbarItem The toolbar item.
         */
        addFromTemplate(template: string, placement?: ToolbarItemPlacement): IToolbarItem;
        /**
         * Add item to toolbar.
         * @param templateUrl The template url for the toolbar item.
         * @param [placement = left] The toolbar item placement.
         * @returns IToolbarItem The toolbar item.
         */
        addFromTemplateUrl(templateUrl: string, placement?: ToolbarItemPlacement): IToolbarItem;
        /**
         * Remove the toolbar item from toolbar.
         * @param item The toolbar item to remove.
         */
        removeItem(item: IToolbarItem): void;
    }
}
declare namespace ionweb {
}
declare namespace ionweb {
    /**
     * Interface of an action class
     */
    interface IAction {
        /**
         * Method to invoke the action
         */
        (): void;
        /**
         * Get the action display name (read-only)
         */
        displayName: string;
        /**
         * Is the action disabled? (read-only, managed by action implementation)
         */
        isDisabled?: boolean;
        /**
         * Get/set the flag to hide the action?
         */
        isHidden?: boolean;
        /**
         * Event raised when isdisabled changes (optional)
         */
        isDisabledChanged?: IEvent<void>;
        /**
         * The icon to show in main menu.
         */
        icon?: string;
    }
    /**
     * Service that exposes useful actions.
     */
    interface IActionService {
        /**
         * Logout action.
         */
        logout: IAction;
        /**
         * Save action.
         */
        save: IAction;
        /**
         * Show preference action.
         */
        showPreference: IAction;
        /**
         * Show about box
         */
        showAbout: IAction;
    }
}
declare namespace ionweb {
    /**
     * The AboutBox service interface.
     */
    interface IAboutBoxService {
        /**
         * Check if the logo is visible or not.
         */
        readonly showLogo: boolean;
        /**
         * Check if the modules list is visible or not.
         */
        readonly showModules: boolean;
        /**
         * Check if the copyright notice is visible or not.
         */
        readonly showCopyrightNotice: boolean;
        /**
         * Check if the privacy notice is visible or not.
         */
        readonly hidePrivacy: boolean;
        /**
         * Check if the current user name is visible or not.
         */
        readonly showCurrentUser: boolean;
        /**
         * Check if the application version is visible or not.
         */
        readonly showVersion: boolean;
        /**
         * Get the logo URL.
         */
        readonly logo: string;
        /**
         * Get the copyright notice.
         */
        readonly copyrightNotice: string;
        /**
         * Get the copyright notice.
         */
        readonly copyrightNoticeLink: string;
        /**
         * Get the privacy notice.
         */
        readonly privacyLink: string;
        /**
         * Get the privacy label.
         */
        readonly privacyLabel: string;
        /**
         * Get the current user name (bus username, with complete multitenancy client ID and no Syadmin last/first name override)
         */
        readonly currentUser: string;
        /**
         * Get the application version.
         */
        readonly version: string;
        /**
         * Get the application name.
         */
        readonly appName: string;
        /**
         * Shows the "About Box" if not already shown.
         */
        display(): void;
        /**
         * Close the "About Box" if shown.
         */
        close(): void;
    }
}
declare namespace ionweb {
    /**
     * Reauthentication result
     */
    enum ReauthenticationResult {
        /**
         * User is authenticated successfully
         */
        Succeeded = 0,
        /**
         * Failed to authenticate user after number of allowed attempts.
         */
        Failed = 1,
        /**
         * User has cancelled authentication by closing dialog.
         */
        Cancelled = 2,
    }
    interface IReauthenticationService {
        /**
         * API to show dialog to reauthenticate user.
         * @param canCancel should allow user to close dialog without reauthenticating.
         * @param attemptsCount number of attempts for wrong passwords.
         * @param description description to be displayed as message in reauthenticate dialog.
         * @param title tite of the reauthenticate dialog.
         */
        reauthenticate(canCancel: boolean, attemptsCount: number, description?: string, title?: string): Q.Promise<ReauthenticationResult>;
    }
}
declare namespace ionweb {
    /**
     * The user activity service interface.
     */
    interface IUserActivityService {
        /**
         * Get the last user activity timestamp
         * @returns a number representing last user activity time in milliseconds.
         */
        lastUserActivityTimestamp: number;
    }
}
declare namespace ionweb {
}
declare namespace ionweb.shell {
}
declare namespace ionweb {
    interface IFileSharingService {
        /**
         * Asynchronously upload of the specified file
         * @param file Blob object of a file that user has to be uploaded.
         * @param config Configuration of the file
         * @returns promise of file id string
         */
        shareFile(file: File, config: ISharedConfiguration): Q.Promise<string>;
        /**
         * Unsharing the file asynchronously
         * @param fileId of file that has to be unshare.
         * @returns void promise
         */
        unshareFile(fileId: string): Q.Promise<void>;
        /**
         * Fetch download url of file asynchronously
         * @param fileId of file which url need to fetch.
         * @returns promise of url string.
         */
        getFileDownloadUrl(fileId: string): Q.Promise<string>;
        /**
         * @param fileId of file which need to download
         * @param secure weather to alert user before downloading
         * @returns void promise on success full retrieval of url
         */
        downloadFile(fileId: string, secure?: boolean): Q.Promise<void>;
        /**
         * @deprecated use shareFile instead which is returning Q promise to avoid digest cycle
         * Asynchronously upload of the specified file
         * @param file Blob object of a file that user has to be uploaded.
         * @param config Configuration of the file
         * @returns promise of file id string
         */
        share(file: File, config: ISharedConfiguration): ng.IPromise<string>;
        /**
         * @deprecated use unshareFile instead which is returning Q promise to avoid digest cycle
         * Unsharing the file asynchronously
         * @param fileId of file that has to be unshare.
         * returns void promise
         */
        unshare(fileId: string): ng.IPromise<void>;
        /**
         * @deprecated use getFileDownloadUrl instead which is returning Q promise to avoid digest cycle
         * Fetch download url of file asynchronously
         * @param fileId of file which url need to fetch.
         * @returns promise of url string.
         */
        getDownloadUrl(fileId: string): ng.IPromise<string>;
        /**
         * @deprecated use downloadFile instead which is returning Q promise to avoid digest cycle
         * @pram fileId of file which need to download
         * @secure weather to alert user before downloading
         * @returns void promise on success full retrieval of url
         */
        download(fileId: string, secure?: boolean): ng.IPromise<void>;
    }
    interface ISharedConfiguration {
        /**
         * Suggested name with which server will save file
         */
        suggestedName: string;
        /**
         * content type of file
         */
        contentType: string;
        /**
         * expire time of file which is going to be uploaded
         */
        expireTime: number;
        /**
         * list of components file is going to be shared with
         * Note: Setting this to non-empty set will restrict target components
         */
        components?: string[];
        /**
         * list of users file is going to be shared with
         * Note: Setting this to non-empty set will restrict target users
         */
        users?: string[];
    }
}
declare namespace ionweb.dashboard {
    /**
     * The tab to show in side panel.
     */
    interface ICollapsibleTabPanelTab {
        /**
         * The tab id, must be unique.
         */
        id: string;
        /**
         * The title to be shown in tab bar.
         */
        title: string;
        /**
         * The tab content.
         */
        templateUrl: string;
        /**
         * The icon to be shown in tab bar along with the title, optional.
         */
        icon?: string;
        /**
         * Is the tab resizable or not. true by default.
         */
        resizable?: boolean;
    }
    /**
     * Callback remove the tab from the side panel.
     */
    interface ICollapsibleTabPanelResult {
        /**
         * Remove the tab from panel.
         */
        remove: () => void;
        /**
         * Event raised when the tab is auto removed as panel is destroyed.
         */
        removed: IEvent<void>;
    }
}
declare namespace ionweb {
    /**
     * The panel side.
     */
    enum PanelSide {
        /**
         * The left panel.
         */
        Left = 0,
        /**
         * The right panel.
         */
        Right = 1,
        /**
         * The top panel.
         */
        Top = 2,
        /**
         * The bottom panel.
         */
        Bottom = 3,
    }
    interface IDashboard {
        /**
         * Add a tab to side panel.
         * @param {dashboard.ICollapsibleTabPanelTab} tab The tab to add.
         * @param {PanelSide} side The side panel to which the tab is added.
         * @returns {dashboard.ICollapsibleTabPanelResult} A callback to remove the tab from side panel.
         */
        addSidePanelTab(tab: dashboard.ICollapsibleTabPanelTab, side: PanelSide): dashboard.ICollapsibleTabPanelResult;
        /**
         * Get the custom controller instance (if available). See IDashboardService.openDashboard and IDashboardDefinition.controllerFunction.
         * Returns a promise already synced with the Angular cycle, so the controller can be safely used.
         */
        getControllerInstance<T>(): ng.IPromise<T>;
    }
    /**
     * Manager for dashboards (service name: 'ionweb.dashboardService')
     */
    interface IDashboardService {
        /**
         * Event raised when the set of opened dashboard changes.
         */
        dashboardsChanged: IEvent<void>;
        /**
         * Open a dashboard from its ID and returns a promise that completes when the dashboard is opened.
         * The promise rejects if the id is invalid or not found. Returns null instead of a dashboard object if the dashboard is already opened as external (pop-out).
         * This call brings to front the dashboard if already opened (if inactive is not set).
         * Dashboard opened in that way can be closed via the close() method.
         * @param id the id of the dashboard to open
         * @param controller If given, it appends a dashboard controller to the dashboard found. Controller can referred by its name (serializable) or by its function
         * pointer (in that case non-serializable). If explicitly set to null it will remove the controller from the dashboard (if any).
         * When the function reference is given (non-serializable), the opened dashboard will not support pop-out, export and "make my own copy" commands.
         * @param tabPos If specified, forces the position of the new opened tab.
         * @param inactive If specified, don't activate the newly opened dashboard.
         */
        openDashboard(id: string, opts?: {
            controller?: Function | string | null;
            tabPos?: number;
            inactive?: boolean;
        }): Q.Promise<IDashboard>;
        /**
         * Open a read-only clone of a dashboard from its ID and returns a promise that completes when the dashboard is opened.
         * Returns error if the source id is invalid or not found.
         * Otherwise a new dashboard is always created, with the copy of the source dashboard, and never saved (temporary).
         * Dashboard opened in that way can be closed via the close() method.
         * @param controller If given, it appends a dashboard controller to the dashboard found. Controller can referred by its name (serializable) or by its function
         * pointer (in that case non-serializable). If explicitly set to null it will remove the controller from the source dashboard (if any).
         * When the function reference is given (non-serializable), the opened dashboard will not support pop-out, export and "make my own copy" commands.
         */
        openDashboardClone(sourceId: string, opts?: {
            controller?: Function | string | null;
        }): Q.Promise<IDashboard>;
        /**
         * Given a series of pair category/name or path/shared, returns an array of the same size in the same order of dashboard ID.
         * The call will access to the global dashboard storage and it will search also in the applicative set of dashboards.
         * Invalid or unexistant names will return as null/undefined items.
         * @param paths array of paths. A path is specified as a pair of string array (the actual path) and a flag (shared or private), or a string
         * (acting as a shorthand of path object with only path set).
         * For compatibility, the path can be still specified as an object with name and category property.
         */
        findDashboardIds(paths: ({
            name: string;
            category: string;
        } | IDashboardPath | string)[]): Q.Promise<string[]>;
        /**
         * Set / get the visibility state of dashboard tabs in toolbar
         */
        hideTabsInToolbar: boolean;
        /**
         * Get the current active dashboard (can be null if no dashboards are present)
         */
        readonly activeDashboard: IDashboard;
        /**
         * Event raised when the activeDashboard value changes
         */
        activeDashboardChanged: IEvent<void>;
        /**
         * Add a controller to the dashboard as a Function or a String (Angular Controller that will be persisted in the dashboard state). Use null to
         * remove any controller.
         * This method will close the given dashboard and re-open it again with the given controller.
         */
        setDashboardController(dashboard: IDashboard, controller: Function | string | null): Q.Promise<IDashboard>;
        /**
         * Are the export/import actions globally enabled?
         */
        readonly canImportExportDashboards: boolean;
        /**
         * Is the create new dashboard action globally enabled?
         */
        readonly canCreateDashboards: boolean;
        /**
         * Is the edit dashboard action globally enabled?
         */
        readonly canEditDashboards: boolean;
        /**
         * Is the show history action globally enabled?
         */
        readonly canShowHistory: boolean;
        /**
         * Is the close dashboard action globally enabled?
         */
        readonly canCloseDashboards: boolean;
    }
}
declare namespace ionweb {
    /**
     * The toolbar service interface. (service 'ionweb.feedbackService')
     */
    interface IFeedbackService {
        isEnabled: boolean;
        useLegacyFeedback: boolean;
    }
}
declare namespace ionweb.dashboard {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb {
    /**
     * Path of a generic item in the workspace (home).
     */
    interface IWorkspaceItemPath {
        /**
         * Path of the dashboard splitted by '/'.
         * It does not include the root folder (e.g. an item in the "Shared" folder does not start with "Shared/").
         */
        path: string;
        /**
         * True if the item is shared.
         */
        shared: boolean;
    }
}
declare namespace ionweb.toolkit {
    interface IBannerBackground {
        color: string;
        classes: string;
        style: {
            [key: string]: string;
        };
    }
    interface INavigationBannerTextModel extends IBannerTextModel {
        dashboardPath?: IWorkspaceItemPath;
        background?: IBannerBackground;
    }
    interface INavigationBannerTextConfig extends IBannerTextConfig {
        canEditBackground?: boolean;
    }
    interface INavigationBannerTextParams {
        model: INavigationBannerTextModel;
        config: INavigationBannerTextConfig;
        placeholder?: string;
        editDashboardPath?: boolean;
    }
}
declare namespace ionweb.toolkit.cm {
    interface IPriceModel extends INumericUpDownModel {
        /**
         * Configuration for remove trailing zeros, disable default group separator & rounding mode.
         */
        options: ionweb.cm.IFormatterOptions;
        /**
         * Custom separator.
         */
        separator: string;
        /**
         * Custom group separator.
         */
        groupSeparator: string;
    }
    /**
     * Allows to use PriceModel class and instantiate it in order to use with NumericUpDown control for formatting.
     */
    interface IPriceModelFactory {
        /**
         * Creates a PriceModel class instance for the format specified. PriceModel instance handles NumericUpDown control's basic functionality.
         * Returns null for incorrect formats.
         * @param format
         */
        getPriceModelForFormat(format: ionweb.cm.Format, options?: ionweb.cm.IFormatterOptions): IPriceModel;
    }
}
declare namespace ionweb {
    /**
     * Help links for IRegistry.helpLinks property
     */
    interface IHelpLink {
        href: string;
        name: string;
    }
    /**
     * Used as parameter of module call
     */
    interface IRegistry {
        /**
         * Register an application-defined readonly dashboard. This will appears in the "Template" section of the dashboard selection.
         * All default templates registered in the application will be opened at startup in case of blank workspace.
         * @param definition the dashboard metadata
         * @returns the UID of the created dashboard
         */
        registerDashboard(definition: IDashboardDefinition): string;
        /**
         * Register an application-defined readonly dashboard to download remotely. This will appears in the "Template" section of the dashboard selection.
         * All default templates registered in the application will be opened at startup in case of blank workspace.
         * @param definition the dashboard metadata
         * @param url the URL where the dashboard data resides
         * @returns the UID of the created dashboard (async)
         */
        registerDashboardUrl(definition: IDashboardDefinition, url: string): Q.Promise<string>;
        /**
         * Access the configuration service
         */
        configurationService: IConfigurationService;
        /**
         * Access the local user preference service
         */
        localUserPreferences: IPreferenceService;
        /**
         * Get/set help links for that modules (visible in non-dashboard mode only).
         */
        helpLinks: IHelpLink[];
    }
}
/**
 * This is for backward compatibility only for strings used in SilverLight
 * where we directly access strings resources as ionweb.String.SomeString
 */
declare namespace ionweb {
}
