/// <reference path="core.ui.d.ts" />
/// <reference path="charts.dm.d.ts" />
declare module ionweb {
}
declare namespace plotly {
    class PlotlyBaseFlagList {
        static concat(modes: string[]): string;
        static readonly None: string;
    }
    class PlotlyTraceTypes {
        static readonly Bar: string;
        static readonly Pie: string;
        static readonly Scatter: string;
        static readonly ScatterGeo: string;
        static readonly BoxPlot: string;
        static readonly CandleStick: string;
    }
    class PlotlyLineShapes {
        static readonly Linear: string;
        static readonly Spline: string;
        static readonly StepHV: string;
        static readonly StepVH: string;
        static readonly StepHVH: string;
        static readonly StepVHV: string;
    }
    class PlotlyZoomMode {
        static readonly Reset: string;
        static readonly XY: string;
        static readonly X: string;
        static readonly Y: string;
    }
    class PlotlyBarPlotOrientation {
        static readonly Horizontal: string;
        static readonly Vertical: string;
    }
    class PlotlyBarPlotMode {
        static readonly Stack: string;
        static readonly Group: string;
    }
    class PlotlyScatterPlotMode extends PlotlyBaseFlagList {
        static readonly Lines: string;
        static readonly Markers: string;
        static readonly Text: string;
    }
    class PlotlyScatterFillMode {
        static readonly None: string;
        static readonly ToZeroY: string;
        static readonly ToZeroX: string;
        static readonly ToNextY: string;
        static readonly ToNextX: string;
    }
    class PlotlyScatterMarkerSymbol {
        static readonly Circle: string;
        static readonly Square: string;
        static readonly Diamond: string;
        static readonly Cross: string;
        static readonly X: string;
        static readonly TriangleUp: string;
        static readonly TriangleDown: string;
    }
    class PlotlyScatterMarkerMode {
        static readonly Open: string;
        static readonly Dot: string;
    }
    class PlotlyLegendOrientation {
        static readonly H: string;
        static readonly V: string;
    }
    class PlotlyLegendTraceOrder {
        static readonly Normal: string;
        static readonly Reversed: string;
        static readonly Grouped: string;
    }
    class PlotlyLegendXAnchor {
        static readonly Left: string;
        static readonly Right: string;
        static readonly Center: string;
    }
    class PlotlyLegendYAnchor {
        static readonly Top: string;
        static readonly Bottom: string;
        static readonly Center: string;
    }
    class PlotlyHoverMode {
        static readonly Closest: string;
    }
    class PlotlyAxisType {
        static readonly Linear: string;
        static readonly Category: string;
        static readonly Date: string;
        static readonly Log: string;
    }
    class PlotlyAxisSide {
        static readonly Left: string;
        static readonly Right: string;
        static readonly Top: string;
        static readonly Bottom: string;
    }
    class PlotlyBaseHoverInfo extends PlotlyBaseFlagList {
        static readonly All: string;
        static readonly Name: string;
        static readonly Text: string;
    }
    class PlotlyCartesianHoverInfo extends PlotlyBaseHoverInfo {
        static readonly X: string;
        static readonly Y: string;
        static readonly Z: string;
    }
    class PlotlyPieHoverInfo extends PlotlyBaseHoverInfo {
        static readonly Label: string;
        static readonly Value: string;
        static readonly Percent: string;
    }
    class PlotlyPieTextPosition {
        static readonly None: string;
        static readonly Auto: string;
        static readonly Inside: string;
        static readonly Outside: string;
    }
    class PlotlyPieTextInfo extends PlotlyBaseFlagList {
        static readonly Label: string;
        static readonly Text: string;
        static readonly Value: string;
        static readonly Percent: string;
    }
    class PlotlyDoubleClickInteraction {
        static readonly None: string;
        static readonly Reset: string;
        static readonly AutoSize: string;
        static readonly ResetAndAutoSize: string;
    }
    class PlotlyTraceVisibility {
        static readonly LegendOnly: string;
    }
    class PlotlyMaps {
        static readonly World: string;
        static readonly Europe: string;
        static readonly USA: string;
        static readonly Asia: string;
        static readonly Africa: string;
        static readonly NorthAmerica: string;
        static readonly SouthAmerica: string;
    }
    class PlotlyLocationModes {
        static readonly ISO: string;
        static readonly State: string;
        static readonly Name: string;
    }
    class PlotlyBoxPlotModes {
        static readonly All: string;
        static readonly None: boolean;
        static readonly Outliers: string;
        static readonly SuspectedOutliers: string;
    }
    class PlotlyDragMode {
        static readonly zoom: string;
        static readonly pan: string;
        static readonly select: string;
        static readonly lasso: string;
    }
    class PlotlyCandlePlotMode {
    }
}
declare namespace plotly {
    type DataPointValue = string | Date | number;
    interface IPlotlyMargin {
        l?: number;
        r?: number;
        t?: number;
        b?: number;
    }
    interface IPlotlyFont {
        family?: string;
        size?: number;
        color?: string;
    }
    interface IPlotlyMarkerLine {
        color?: string | string[];
        width?: number | number[];
    }
    interface IPlotlyMarker {
        color?: string | string[] | number[];
        colors?: string | string[] | number[];
        opacity?: number;
        size?: number | number[];
        sizeDataPoint?: number[];
        line?: IPlotlyMarkerLine;
        symbol?: string;
        cmin?: number;
        cmax?: number;
        colorscale?: string | any[];
    }
    interface IPlotlyLine {
        color?: string | string[];
        width?: number | number[];
        shape?: string;
        smoothing?: number;
        dash?: string | number;
    }
    interface IPlotlyAnnotation {
        yanchor?: string;
        xanchor?: string;
        text: number | Date | string;
        font?: IPlotlyFont;
        bgcolor?: string;
        opacity?: number;
        yref?: string;
        xref?: string;
        x: number | string;
        y: number;
        showarrow?: boolean;
        borderpad?: number;
        classes?: string;
    }
    interface IPlotlyTraceBase {
        name?: string;
        visible?: string | boolean;
        type?: string;
        xaxis?: string;
        yaxis?: string;
        marker?: IPlotlyMarker;
        opacity?: number;
        legendgroup?: string;
        hoverinfo?: string;
        mode?: string;
        line?: IPlotlyLine;
        fill?: string;
        orientation?: string;
        sort?: boolean;
        textposition?: string;
        textinfo?: string;
        hole?: number;
        insidetextfont?: {
            size: number;
        };
        outsidetextfont?: {
            size: number;
        };
    }
    interface IPlotlyRect {
        x0: number;
        y0: number;
        x1: number;
        y1: number;
    }
    interface IPlotlyShape {
        opacity?: number;
        layer?: string;
        xref?: string;
        yref?: string;
        fillcolor?: string;
        path?: string;
        x0?: number;
        y0?: number;
        x1?: number;
        y1?: number;
        type: string;
        line?: IPlotlyLine;
        classes?: string;
        seriesName?: string;
        reference?: ionweb.charts.IChartSeriesPointReference;
    }
    interface IPlotlyTrace extends IPlotlyTraceBase {
        x?: DataPointValue[];
        y?: DataPointValue[];
        z?: DataPointValue[];
        open?: number[];
        close?: number[];
        high?: number[];
        low?: number[];
        increasing?: {
            line: {
                color: string;
            };
        };
        decreasing?: {
            line: {
                color: string;
            };
        };
        values?: DataPointValue[];
        labels?: string[];
        text?: string[];
        textbox?: DataPointValue[][];
        references?: ionweb.charts.IChartSeriesPointReference[];
        locations?: string[];
        rect?: IPlotlyRect[];
        locationmode?: string;
        domain?: {
            x?: number[];
            y?: number[];
        };
        pull?: number[];
        boxpoints?: string | boolean;
    }
    interface IPlotlyTraceUpdate extends IPlotlyTraceBase {
        x?: DataPointValue[][];
        y?: DataPointValue[][];
        open?: number[];
        close?: number[];
        high?: number[];
        low?: number[];
        values?: DataPointValue[][];
        labels?: string[][];
        text?: string;
        textbox?: DataPointValue[][];
        references?: string;
        shapes?: any;
        "marker.size"?: number;
        "marker.color"?: string;
        "marker.line.color"?: string;
    }
    interface IPlotlyAxisLayout {
        title?: string;
        type?: string;
        font?: IPlotlyFont;
        overlaying?: string;
        side?: string;
        zeroline?: boolean;
        showgrid?: boolean;
        autorange?: boolean | string;
        fixedrange?: boolean;
        showticklabels?: boolean;
        range?: number[];
        rangeslider?: any;
        categoryarray?: string[];
        categoryorder?: string;
        shapes?: any;
    }
    interface IPlotlyLegendLayout {
        traceorder?: string;
        xanchor?: string;
        x?: number;
        yanchor?: string;
        y?: number;
        orientation?: string;
    }
    interface IPlotlyLayout {
        autosize?: boolean;
        title?: string;
        font?: IPlotlyFont;
        xaxis?: IPlotlyAxisLayout;
        xaxis2?: IPlotlyAxisLayout;
        yaxis?: IPlotlyAxisLayout;
        yaxis2?: IPlotlyAxisLayout;
        annotations?: IPlotlyAnnotation[];
        margin?: IPlotlyMargin;
        hovermode?: string | boolean;
        hoverFollowsMouse?: boolean;
        dragmode?: string;
        legend?: IPlotlyLegendLayout;
        showlegend?: boolean;
        separators?: string;
        barmode?: string;
        bargap?: number;
        bargroupgap?: number;
        shapes?: IPlotlyShape[];
    }
    interface IPlotlyCartesianClickEventArgs {
        points: IPlotlyCartesianClickPointEventArgs[];
    }
    interface IPlotlyCartesianClickPointEventArgs {
        data: IPlotlyTrace;
        curveNumber: number;
        pointNumber: number;
        x: DataPointValue;
        y: number;
        z?: number;
    }
    interface IPlotlyPieClickEventArgs {
        points: IPlotlyPieClickPointEventArgs[];
    }
    interface IPlotlyPieClickPointEventArgs {
        curveNumber: number;
        i: number;
        label: string;
        v: number;
    }
    interface IPlotlyOptions {
        displaylogo?: boolean;
        showLink?: boolean;
        linkText?: string;
        staticPlot?: boolean;
        displayModeBar?: boolean;
        doubleClick?: string;
        editable?: boolean;
        editableMainTitle?: boolean;
        editableAxisXTitle?: boolean;
        editableAxisYTitle?: boolean;
        editableAxisX2Title?: boolean;
        editableAxisY2Title?: boolean;
    }
    interface IThenable<T> {
        then<U>(onFulfilled?: (value: T) => U | IThenable<U>, onRejected?: (error: any) => U | IThenable<U>): IThenable<U>;
        then<U>(onFulfilled?: (value: T) => U | IThenable<U>, onRejected?: (error: any) => void): IThenable<U>;
        catch<U>(onRejected?: (error: any) => U | IThenable<U>): IThenable<U>;
    }
    interface IPlotlyPlots {
        resize(container: string | HTMLElement): IThenable<void>;
    }
    interface IPlotly {
        /**
         * Gives access to the Plots sub-module.
         */
        Plots: IPlotlyPlots;
        /**
         * Creates a new plot
         * @param container
         * @param traces
         * @param layout
         * @param options
         */
        newPlot(container: string | HTMLElement, traces: IPlotlyTrace[], layout: IPlotlyLayout, options?: IPlotlyOptions): void;
        /**
         * Triggers a full redraw
         */
        redraw(container: string | HTMLElement): void;
        /**
         * Just update layout attrs
         */
        relayout(container: string | HTMLElement, layout: IPlotlyLayout): void;
        /**
         * Just update trace attrs
         */
        restyle(container: string | HTMLElement, update: IPlotlyTraceUpdate, index: number | number[]): void;
        /**
         * Add new traces
         */
        addTraces(container: string | HTMLElement, trace: IPlotlyTrace | IPlotlyTrace[], position?: number): void;
        /**
         * Remove existing traces
         */
        deleteTraces(container: string | HTMLElement, index: number | number[]): void;
        /**
         * Get/set the default color palette
         */
        colorDefaults(colors?: string[]): string[];
        /**
         * dateTime2ms - turn a date object or string s into milliseconds
         * (relative to 1970-01-01, per javascript standard)
         * optional calendar (string) to use a non-gregorian calendar
         *
         * Returns BADNUM if it doesn't find a date
         *
         * strings should have the form:
         *
         *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?
         *
         * <sep>: space (our normal standard) or T or t (ISO-8601)
         * <tzInfo>: Z, z, or [+\-]HH:?MM and we THROW IT AWAY
         * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6
         * but we allow it even with a space as the separator
         */
        dateTime2ms(s?: string): number;
    }
}
declare namespace ionweb.charts {
    import IPlotlyTrace = plotly.IPlotlyTrace;
    import IPlotlyAxisLayout = plotly.IPlotlyAxisLayout;
    class PlotlyConverter {
        static _dataConverter: {
            [plotType: number]: (points: ISeriesPoint[], sl: ChartSeriesLayout, cl: ChartLayout) => IPlotlyTrace;
        };
        static pointIsValid(point: ISeriesPoint, allowEmptyX?: boolean, allowEmptyY?: boolean): boolean;
        static initializeDataConverters(): void;
        static convertSeriesData(points: ISeriesPoint[], seriesLayout: ChartSeriesLayout, layout: ChartLayout): IPlotlyTrace;
        static rebuildPlotlyAxisLayout(cal: ChartAxisLayout, pal: IPlotlyAxisLayout, flipAxes: boolean, cl: ChartLayout): IPlotlyAxisLayout;
        static setPlotlyPieDomains(plotlyData: plotly.IPlotlyTrace[]): void;
        static convertScatterDrawMode(mode: ChartScatterDrawMode): string;
        static convertScatterLineInterpolation(interpolation: ChartScatterLineInterpolation): string;
        static convertScatterFillMode(fill: ChartScatterFillMode, flipAxes: boolean): string;
        static convertScatterMarkerSymbol(mode: ChartScatterMarkerSymbol, filled: boolean): string;
        static convertAxisIdToTraceAxisField(axisId: ChartAxisId, flipAxes: boolean): string;
        static convertAxisIdToPlotlyAxisName(axisId: ChartAxisId, flipAxes: boolean): string;
        static convertAxisType(axisType: ChartAxisType): string;
        static convertStackablePlotArrangement(arrangement: ChartStackablePlotArrangement): string;
        static convertBarPlotOrientation(orientation: ChartBarOrientation, flipAxes: boolean): string;
        static convertPiePlotSliceInfo(sliceInfo: ChartPieSliceInfo): string;
        static convertPlotType(type: ChartPlotType): string;
        static convertMap(map: GeoMap): string;
        static convertLocationMode(mode: LocationMode): string;
        static convertFromPlotlyZoomInfo(plotlyZoomInfo: IPlotlyZoomInfo, layout: ChartLayout): ChartZoomEventArgs;
        static convertPlotlyAxisNameToChartAxisId(axisName: string): ChartAxisId;
        static convertNumberArrayToRange(arrayRange: number[], convertToDates: boolean): Range;
        static convertRangeToNumberArray(range: Range, convertToDates: boolean): number[];
        static ConvertLegendOrientation(orientation: ChartLegendOrientation): string;
        private static convertSeriesDataForPieTrace(points, seriesLayout, layout);
        private static convertSeriesDataForCartesianTrace(points, seriesLayout, chartLayout, allowEmptyX?, allowEmptyY?);
        private static convertSeriesDataForBoxTrace(points, seriesLayout, chartLayout);
        private static convertSeriesDataForCandleTrace(points, seriesLayout, chartLayout, allowEmptyX?);
        private static convertSeriesDataForBubbleTrace(points, seriesLayout, chartLayout);
        private static convertSeriesDataForGeoTrace(points, seriesLayout, chartLayout);
    }
    interface IPlotlyAxisZoomInfo {
        oldRange: number[];
        newRange: number[];
        name: string;
        fractionalRange: number[];
    }
    interface IPlotlyZoomInfo {
        zoomMode?: string;
        box?: any;
        axes?: IPlotlyAxisZoomInfo[];
        userHandled?: boolean;
        pre?: boolean;
    }
}
declare namespace ionweb.charts {
    /**
     * A function which takes two arguments (a Chart Data model and an HTMLElement to use as the renderer container)
     * and returns the promise of a Chart Renderer.
     */
    interface IChartRendererFactory {
        (chart: ChartDataModel, elem: HTMLElement): Q.Promise<ChartRenderer>;
    }
    /**
     * A service used to register custom Chart Renderer factories.
     */
    class ChartRendererService {
        private _themeManager;
        private _logger;
        private _rendererFactories;
        constructor(loggerFactory: ILoggerFactory, q: IQService, _themeManager: IThemeManagerService);
        /**
         * Registers a new factory, identified by the specified name (e.g.: "plotly")
         *
         * @param name - the unique name for the renderer factory.
         * @param factory - the actual factory.
         */
        registerFactory(name: string, factory: IChartRendererFactory): void;
        /**
         * Unregisters the factory identified by the specified name (e.g.: "plotly")
         *
         * @param name - the unique name for the renderer factory.
         */
        unregisterFactory(name: string): void;
        /**
         * Gets the a map of the registered factories.
         */
        readonly factories: {
            name: string;
            factory: IChartRendererFactory;
        }[];
        /**
         * Gets the registered factory identified by the spiecified name.
         *
         * @param name - the name of the desired IChartRendererFactory.
         */
        factory(name: string): IChartRendererFactory;
        private registerDefaultRenderers(q);
    }
}
declare namespace ionweb.charts {
}
