/// <reference path="core.ui.d.ts" />
/// <reference path="charts.ui.d.ts" />
/// <reference path="shell.ui.d.ts" />
/// <reference path="toolkit.d.ts" />
declare module ionwebng2 {
}
declare module "ionweb-angular/autocomplete" {
    import { ElementRef, EventEmitter, Injector } from "@angular/core";
    import { UpgradeComponent } from "@angular/upgrade/src/aot/upgrade_component";
}
declare module "ionweb-angular/button" {
    import { ElementRef, Injector, EventEmitter } from "@angular/core";
    import { UpgradeComponent } from "@angular/upgrade/src/aot/upgrade_component";
}
declare module "ionweb-angular/chart" {
    import { ElementRef, Injector } from "@angular/core";
    import { UpgradeComponent } from "@angular/upgrade/src/aot/upgrade_component";
}
declare module "ionweb-angular/grid" {
    import { ElementRef, Injector } from "@angular/core";
    import { UpgradeComponent } from "@angular/upgrade/src/aot/upgrade_component";
}
declare module "ionweb-angular/numericUpDown" {
    import { ElementRef, Injector, EventEmitter } from "@angular/core";
    import { ControlValueAccessor } from "@angular/forms";
    import { UpgradeComponent } from "@angular/upgrade/src/aot/upgrade_component";
}
declare module "ionweb-angular/scopeComponentProvider" {
    import { ElementRef } from "@angular/core";
    export class ScopeComponentProvider {
        getScopeComponent(elementRef: ElementRef): ionweb.IComponent;
    }
}
declare module "ionweb-angular/templateHelper" {
}
declare module "ionweb-angular/services" {
    export abstract class NotificationService implements ionweb.INotificationService {
        abstract show(message: string, params: ionweb.INotificationParameters): any;
        abstract showError(message: any, secondary?: string, details?: any, isException?: boolean): void;
        abstract showWarning(message: any, secondary?: string, details?: any): void;
        abstract showInfo(message: any, secondary?: string, details?: any): void;
        abstract showFatal(message: string): void;
        abstract showSnackBar(message: string): void;
        abstract status(component: string, status: ionweb.ServiceStatus, message?: string, displayName?: string): void;
        isOffline: boolean;
        isOfflineChanged: ionweb.IEvent<void>;
    }
    export abstract class CommService implements ionweb.ICommService {
        abstract subscribe(opts: ionweb.ISubscriptionOptions): ionweb.ISubscription;
        abstract invoke(opts: ionweb.IFunctionOptions): Q.Promise<ionweb.IFunctionResult>;
        abstract transact(opts: ionweb.ITransactionOptions): Q.Promise<void>;
        abstract ssonLogin(markets: ionweb.cm.ISsonMarketCall[]): Q.Promise<ionweb.cm.ISsonServiceResponse>;
        abstract ssonLogout(markets: ionweb.cm.ISsonMarketCall[]): Q.Promise<ionweb.cm.ISsonServiceResponse>;
        streamingMetadata: {
            [id: string]: any;
        };
    }
    export abstract class ConfigurationService implements ionweb.IConfigurationService {
        abstract changed: ionweb.IEvent<void>;
        abstract config: ionweb.IConfig;
        abstract arguments: {
            [key: string]: string;
        };
        abstract getApplicationUrl: (args?: {
            [key: string]: string;
        }) => string;
    }
    export abstract class ResponsivenessService implements ionweb.IResponsivenessService {
        abstract register(element: HTMLElement, callback: ionweb.IResizeObserverHandler): ionweb.IResponsivenessServiceRegistrationResult;
    }
    export abstract class IconService implements ionweb.IIconService {
        abstract getDefaultSet(): ionweb.ICssFontIconSet;
        abstract getIconSet(name: string): ionweb.ICssFontIconSet;
        abstract registerIconSet(iconSet: ionweb.IIconSetAdditions): void;
    }
    export abstract class PriceModelFactory implements ionweb.toolkit.cm.IPriceModelFactory {
        abstract getPriceModelForFormat(format: ionweb.cm.Format, options?: ionweb.cm.IFormatterOptions): ionweb.toolkit.cm.IPriceModel;
    }
    export namespace cm {
        abstract class FormatterService implements ionweb.cm.IFormatterService {
            abstract getFormatter(fmt: ionweb.cm.Format): ionweb.cm.IFormatter;
            abstract registerFormatter(fmt: ionweb.cm.Format, formatter: ionweb.cm.IFormatter): void;
        }
    }
    export abstract class DataModelFactory implements ionweb.tables.IDataModelFactory {
        abstract createQueueDataModel(functionName: string, namedArgs: {
            [argName: string]: any;
        }, opts: ionweb.tables.IRecordDataModelOptions, logId?: string): Q.Promise<ionweb.tables.IQueueDataModel>;
        abstract createQueueDataModel(func: ionweb.IFunctionOptions, opts: ionweb.tables.IRecordDataModelOptions, logId?: string): Q.Promise<ionweb.tables.IQueueDataModel>;
        abstract createQueueDataModelById(queueName: string, opts: ionweb.tables.IRecordDataModelOptions, logId?: string): ionweb.tables.IQueueDataModel;
        abstract createQueueDataModelNotSubscribed(opts: ionweb.tables.IRecordDataModelOptions, logId?: string): ionweb.tables.IQueueDataModel;
        abstract createChainDataModel(chainId: string, opts: ionweb.tables.IRecordDataModelOptions, logId?: string): ionweb.tables.IChainDataModel;
        abstract createChainDataModelNotSubscribed(opts: ionweb.tables.IRecordDataModelOptions, logId?: string): ionweb.tables.IChainDataModel;
        abstract createScrollerDataModel(logId?: string, opts?: ionweb.tables.IRecordDataModelOptions): ionweb.tables.IScrollerDataModel;
        abstract createDataTable(source: ionweb.tables.IDataModel, options?: ionweb.tables.IDataTableCreateOptions): ionweb.tables.IDataTable;
        abstract createValidationDataModel(source: ionweb.tables.IDataModel): ionweb.tables.IValidationDataModelAdapter;
    }
    export class DialogService implements ionweb.IDialogService {
        private svc;
        show(opts: ionweb.IDialogCreateOptions): ionweb.IDialog<any>;
        showCustom(opts: ionweb.ICustomDialogCreateOptions): ionweb.IDialog<any>;
        showConfirmationDialog(content: string | ionweb.ISimpleDialogCreateOptions, title?: string, okText?: string): ionweb.IDialog<void>;
        showQuestionDialog(content: string | ionweb.ISimpleDialogCreateOptions, title?: string, positiveText?: string, negativeText?: string): ionweb.IDialog<ionweb.DialogResult>;
        showOptionDialog(content: string | ionweb.ISimpleDialogCreateOptions, buttons: string[], title?: string): ionweb.IDialog<number>;
        showTopLevelWindow(opts: ionweb.ITopLevelWindowOptions): ionweb.IDialog<void>;
        showTopLevelDialog(opts: ionweb.ITopLevelDialogOptions): ionweb.IDialog<any>;
        readonly dialogClassManager: ionweb.IDialogClassManager;
    }
}
declare module "ionweb-angular" {
    import { Injector, NgModuleRef, Type } from "@angular/core";
    import "@types/core-js";
    export abstract class IonWebModule {
        protected ngDoBootstrap(): void;
    }
    export class IonWebNgModule extends IonWebModule {
    }
    export const bootstrap: (element: Element, modules?: string[], config?: any) => void;
    export const IonWebInjector: {
        provide: string;
        useFactory: () => ng.auto.IInjectorService;
    };
    /**
     * Fixed version of upgrade/downgradeComponent, that supports multiple modules
     */
    export const downgradeComponent: (info: {
        component: Type<any>;
        injector: Injector;
        inputs?: string[];
        outputs?: string[];
    }) => any[];
    /**
     * Converts an Angular @Component to a template that can be used for ION.WEB APIs.
     */
    export const toTemplate: (registry: ionweb.IRegistry, moduleRef: NgModuleRef<any>, component: Type<any>) => string;
    export * from "ionweb-angular/services";
    export * from "ionweb-angular/scopeComponentProvider";
}
