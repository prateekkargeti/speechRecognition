/// <reference path="core.d.ts" />
declare namespace ionweb {
}
/**
 *      Copyright (C) 2008 10gen Inc.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
declare var hexcase: number;
declare var b64pad: string;
declare var chrsz: number;
declare function hex_md5(s: string): string;
declare function b64_md5(s: string): string;
declare function str_md5(s: string): string;
declare function hex_hmac_md5(key: string, data: string): string;
declare function b64_hmac_md5(key: string, data: string): string;
declare function str_hmac_md5(key: string, data: string): string;
declare function md5_vm_test(): boolean;
declare function core_md5(x: number[], len: number): number[];
declare function md5_cmn(q: any, a: any, b: any, x: any, s: any, t: any): number;
declare function md5_ff(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function md5_gg(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function md5_hh(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function md5_ii(a: any, b: any, c: any, d: any, x: any, s: any, t: any): number;
declare function core_hmac_md5(key: string, data: string): number[];
declare function safe_add(x: number, y: number): number;
declare function bit_rol(num: number, cnt: number): number;
declare function str2binl(str: string): any[];
declare function binl2str(bin: number[]): string;
declare function binl2hex(binarray: number[]): string;
declare function binl2b64(binarray: number[]): string;
declare namespace ionweb {
    enum PlatformError {
        IonDaemonPasswordChangeRequired = 0,
        IonDaemonExpiredPasswordChangeRequired = 1,
        IonDaemonExpiredAccount = 2,
        IonDaemonNewPasswordRejected = 3,
        IonDaemonDeniedRegistration = 4,
        IonDaemonAlreadyLogged = 5,
        ConcurrentLogin = 6,
        AlreadyLoggedIn = 7,
        IonDaemonDuplicatedUser = 8,
        IonDaemonBadCredentials = 9,
        UsernameNotFound = 10,
        IonDaemonUnauthorizedUser = 11,
        IonDaemonAuthenticationMethodNotSupported = 12,
        IonDaemonOtpRequired = 13,
        IonDaemonWrongOtp = 14,
        IonDaemonProtocolError = 15,
        IonDaemonLicenseUnavailable = 16,
        AccountExpired = 17,
        CredentialsExpired = 18,
        Disabled = 19,
        IonDaemonDisabledUser = 20,
        Locked = 21,
        SessionAlreadyAuthenticated = 22,
        NotReady = 23,
        AbsoluteTimeout = 24,
        ExternalLogoutFunctionCall = 25,
        InactivityTimeout = 26,
        PlatformComponentDown = 27,
        UserRemoved = 28,
        MinimumRequiredClientVersion = 29,
        UsernameTooLong = 30,
        PasswordTooLong = 31,
        NewPasswordTooLong = 32,
        IonDaemonDisconnected = 33,
        IonDaemonPasswordPolicyAlreadyInHistory = 34,
        IonDaemonPasswordPolicyBadDiffUser = 35,
        IonDaemonPasswordPolicyBadMinAscii = 36,
        IonDaemonPasswordPolicyBadMinLength = 37,
        IonDaemonPasswordPolicyBadMinLower = 38,
        IonDaemonPasswordPolicyBadMinNumeric = 39,
        IonDaemonPasswordPolicyBadMinSpecial = 40,
        IonDaemonPasswordPolicyBadMinUpper = 41,
        IonDaemonPasswordPolicyBadSpecialOrDigit = 42,
        IonDaemonPasswordProtocolError = 43,
        IonDaemonPasswordPolicyInvalidChar = 44,
        IonDaemonPasswordPolicyCustomError = 45,
        ComponentNameTooLong = 46,
        AuthenticationServiceError = 47,
    }
    /**
     * The server service interface (name ionweb.serverService)
     */
    interface IServerService {
        /**
         * Logout function. Promise until really logged out. Used for example if a reauthentication fails and the app needs to logout the page for security.
         */
        logout(reason?: string): Q.Promise<void>;
        /**
         * Check the server connection (e.g. if already logged in)
         */
        getStatus(): Q.Promise<ILoginStatus>;
        /**
         * Build a GET http request. If relative URL are used, the server base will be used.
         * The category for statistics will be 'Other'.
         * @param url The URL relative to the web.server or absolute
         * @returns a web request builder
         */
        get(url: string): IWebRequest;
        /**
         * Build a POST http request. If relative URL are used, the server base will be used.
         * The category for statistics will be 'Other'.
         * @param url The URL relative to the web.server or absolute
         * @returns a web request builder
         */
        post(url: string): IWebRequest;
        /**
         * Build a Put http request. If relative URL are used, the server base will be used.
         * The category for statistics will be 'Other'.
         * @param url The Uri relative to the web.server or absolute
         * @returns a web request builder
         */
        put(url: string): IWebRequest;
        /**
         * Retrieve the current client instance id
         */
        getInstanceId(): string;
        /**
         * Current logged-in bus user name. In case of multitenancy, the user name is the bus one (composed by username + tenant ID)
         */
        getUserName(): string;
        /**
         * Get the multi-tentant tenant ID (if used).
         * Not available in Silverlight
         */
        getClientId?(): string;
        /**
         * Raised when the LoginStatus changes
         */
        statusChanged: IEvent<ILoginStatus>;
    }
    /**
     * The login status
     */
    interface ILoginStatus {
        isAuthenticated: boolean;
        /**
         * Error text in case login failure
         */
        error: string;
        /**
         * Get the value of a session information metadata, or null if the metadata is not present.
         * The function is not available in case of missing server response.
         */
        getSessionInfoMetadata?(key: string): string;
    }
    /**
     * Supported user action status
     */
    interface IUserActionSupported {
        changePassword: boolean;
    }
}
declare namespace ionweb {
    /**
     * Config object for multitenancy
     */
    interface IMultitenancyConfig {
        /**
         * Template string to combine the client id (tenant) and the username in the bus username.
         * Uses 'user' for the bare username entered in the login page and 'client' for the client id (tenant)
         * By default is ${user}@${client}
         */
        usernameFormatRule?: string;
        /**
         * Regex string to parse the composed bus username to extract the client id (tenant) and the username.
         * The regex should use captures and then define an array of names for each capture.
         * The names should be 'user' for the bare username and 'client' for the client id (tenant).
         * By default is regex: "(.*)@(.*)" and matchesNames: ['user', 'client'].
         */
        usernameParseRule?: {
            regex: string;
            matchesNames: string[];
        };
        /**
         * Default client id (tenant), to use in case of first access.
         * By default is not set.
         */
        defaultClientId?: string;
    }
    /**
     * The config section of the SDK ('shell').
     */
    interface IShellConfig {
        /**
         * When set, specify the URL to send the analytics stats.
         */
        analyticsUrl?: string;
        /**
         * When true, disables analytics upload
         */
        disableAnalytics?: boolean;
        /**
         * Enable and configure multi-tenancy.
         * If set to true, it enables the feature with all default settings.
         */
        multitenancy?: boolean | IMultitenancyConfig;
    }
}
declare namespace ionweb.server {
}
