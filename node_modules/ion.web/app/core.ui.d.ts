
/// <reference path="core.d.ts" />
/// <reference path="server.d.ts" />
/// <reference path="toolkit.d.ts" />

declare module ionweb {
}
declare namespace ionweb.coreui {
}
declare namespace ionweb {
    /**
     * Service to access environment features and status (service name: ionweb.environmentService)
     */
    interface IEnvironmentService {
        /**
         * return TRUE whenever the app runs on a touch device. FALSE otherwise.
         */
        isTouchDevice(): boolean;
    }
}
declare namespace ionweb {
    /**
     * A caption bar button (e.g. in the component's header)
     */
    interface ICaptionBarButton {
        /**
         * Icon type name
         */
        icon: string;
        /**
         * Additional CSS classes
         */
        classes?: string[];
        /**
         * Tooltip of the button
         */
        description?: string;
        /**
         * Action. If undefined, the button will be rendered as disabled.
         */
        action?: (event: GlobalEvent) => void;
        /**
         * Boolean value if set true, will render the button on left side of caption bar. Default is false.
         */
        left?: boolean;
    }
    /**
     * A GUI component type
     */
    interface IComponentType {
        /**
         * The URL of the HTML AngularJs template of the component.
         */
        templateUrl?: string;
        /**
         * The body of the HTML AngularJs template of the component.
         */
        template?: string;
        /**
         * Custom component icon name to use in selectors. Instead of the icon name, an enumerated value can be used: in that case a standard icon for that component type will be used (e.g. chart, grid, etc..).
         */
        icon?: string | ComponentTypeIcon;
        /**
         * Default width in root view percentage (0, 1] to use at creation time. Leave undefined to use the default
         */
        defaultWidth?: number;
        /**
         * Default height in pixels to use at creation time. Leave undefined to use the default
         */
        defaultHeight?: number;
        /**
         * Minimum width in root view percentage (0, 1]. Leave undefined to use the default
         */
        minWidth?: number;
        /**
         * Minimum height in pixels. Leave undefined to use the default
         */
        minHeight?: number;
        /**
         * Maximum width in root view percentage (0, 1]. Leave undefined to use the default
         */
        maxWidth?: number;
        /**
         * Maximum height in pixels. Leave undefined to use the default
         */
        maxHeight?: number;
    }
    interface IComponentStyleOptions {
        backgroundColor?: string;
    }
    /**
     * A GUI component instance. Property can be observed through the scope watch.
     */
    interface IComponent extends IPreferenceProvider {
        /**
         * Maximize the component view (see restore). Only available if dashboard support is enabled.
         */
        maximize?(): void;
        /**
         * Restore the component view (see maximize). Only available if dashboard support is enabled.
         */
        restore?(): void;
        /**
         * Is the component maximized? (see maximize and restore). Only available if dashboard support is enabled. This can be observed using scope.$watch.
         */
        isMaximized?(): boolean;
        /**
         *  True if the component can be activated. Undefined by default.
         */
        canBeActive: boolean;
        /**
         * Get a flag that indicates the visibility of a component. For example, in dashboard a component
         * can be hidden if the dashboard is not tabbed and not selected. This can be observed using scope.$watch.
         * When dashboards are disabled, this is always true.
         */
        visible: boolean;
        /**
         * Get/set the component title (shown in the caption bar). This can be edited by the user too. It can be observed using scope.$watch.
         */
        title?: string;
        /**
         * Get the type ID of the component instance (see catalog). Only widgets (directly created at dashboard level) can have typeId.
         */
        typeId?: string;
        /**
         * If true, make the component's caption hidden by default.
         * if false, make the component's caption shown by default.
         * if undefined, Component's Caption will be shown based on Show Caption at dashboard level
         * The caption will be however be visible in case of layout editor (to allow drag, tab reorder, etc...)
         */
        hideCaption?: boolean;
        /**
         * Get/set custom caption buttons, that will be added to the set of the standard buttons. It is possible to change it at runtime (for example to
         * change the set of the buttons between edit modes).
         */
        customButtons?: ICaptionBarButton[];
        /**
         * Set help action in component. If helpAction is set by component then help button will visible in caption.
         */
        helpAction?(): void;
        /**
         * Close the component. Only available if dashboard support is enabled.
         */
        close?(): void;
        /**
         * Clone the component in the current dashboard (in the first available space) and returns the instance of the cloned component.
         * Only available if dashboard support is enabled.
         */
        clone?(): IComponent;
        /**
         * Global component style
         */
        componentStyle?: IComponentStyleOptions;
        /**
         * Is a container with the editmode control? (e.g. a dashboard)
         */
        isContainer?: boolean;
    }
    /**
     * Standard icons for component type icons
     */
    enum ComponentTypeIcon {
        /**
         * A stylized chart-based component
         */
        Chart = 0,
        /**
         * A stylized grid-based component
         */
        Grid = 1,
        /**
         * A stylized card/scorecard-based component
         */
        Scorecard = 2,
    }
}
declare namespace ionweb {
}
declare namespace ionweb {
    /**
     * The angular scope of a component-based controller
     */
    interface ISafeComponentScope extends ng.ISafeScope {
        /**
         * Provides access to the component object
         */
        component: IComponent;
    }
    /**
     * The angular scope of a component-based controller
     * @deprecated Please use the ISafeComponentScope instead
     */
    interface IComponentScope extends ISafeComponentScope, ng.IScope {
    }
}
declare namespace ionweb {
    /**
     * Enumerated value for IEmbeddingService.envType
     */
    enum EmbeddedEnvironmentType {
        /**
         * No embedding
         */
        None = 0,
        /**
         * The SDK is embedded in a parent frame (web portal) with integrated authentication
         */
        ParentFrame = 1,
        /**
         * The SDK is running in a child window (e.g. dashboard pop-out)
         */
        ChildWindow = 2,
        /**
         * The SDK is running as embedded in ION.NET
         */
        IonNet = 3,
        /**
         * The SDK is running as embedded in a native mobile app
         */
        MobileApp = 4,
    }
    /**
     * Service to interact with the embedding host, service name 'ionweb.embeddingService'.
     */
    interface IEmbeddingService {
        /**
         * Get/set the template url to have a custom control in the login page
         * @deprecated Please switch to config setting 'customLoginControlTemplate'
         */
        customLoginControlTemplateUrl: string;
        /**
         * If isAvailable is set, returns the current environment type
         */
        envType: EmbeddedEnvironmentType;
    }
}
declare namespace ionweb {
    /**
     * Interface used in IRegistry.lessAdditions and cssAdditions
     */
    interface IStyleSheetAddition {
        /**
         * The content of the stylesheet (either LESS or CSS). If null/undefined it will be fetched from the url
         */
        content?: string;
        /**
         * The relative URL of the stylesheet (either LESS or CSS). The path is needed even if the above content is already available,
         * since it will be used as key.
         */
        path: string;
    }
    /**
     * Define a theme object
     */
    interface ITheme {
        /**
         * Theme name as unique key
         */
        name: string;
        /**
         * Is this a built-in theme?
         */
        isBuiltin: boolean;
        /**
         * Display name, used in UI selector
         */
        displayName: string;
        /**
         * The css url (local) of the theme. Can be undefined if the theme is dynamic from LESS
         */
        css: string;
        /**
         * The less url (local) of the theme. If defined, less will compile it at runtime. If both cssUrl and lessUrl are defined,
         * the css link will be used normally, unless in theme preview mode (where some LESS var should be overridden).
         */
        less: string;
    }
    /**
     * Theme manager (service name: ionweb.themeManager)
     */
    interface IThemeManagerService {
        /**
         * Event raised when the current theme has been changed
         */
        currentThemeChanged: IEvent<void>;
        /**
         * Gets the list of available theme variables to populate the color picker.
         */
        getThemeVariables(): string[];
        /**
         * Get the list of available themes
         */
        getThemes(): ITheme[];
        /**
         * Get the list of user-selectable themes
         */
        getSelectableThemes(): ITheme[];
        /**
         * Find theme by its name
         */
        findTheme(name: string): ITheme;
        /**
         * Get/set the current theme
         */
        currentTheme: ITheme;
        /**
         * Event raised when the current theme is about to change
         */
        currentThemeChanging: IEvent<void>;
        /**
         * Event raised when the set of available themes changes
         */
        themesChanged: IEvent<void>;
        /**
         * Gets a categorized map of the theme variables split by categories.
         */
        getCategorizedThemeVariables(): {
            [category: string]: string[];
        };
        /**
         * Gets all the uncategorized (unknown) theme variables
         */
        getUnCategorizedThemeVariables(): string[];
        /**
         * Gets the category for the specified variable, if known.
         */
        getCategoryForVariable(varName: string): string;
        /**
         * Gets all the variations of the given main tone.
         */
        getVariations(varName: string): string[];
        /**
         * Gets the theme class corresponding to the specified variable and variant.
         */
        getThemeClass(varName: string, postfix: string): string;
        /**
         * Gets the theme class corresponding to the specified variable and variant, if there's one.
         * Otherwise treats the passed string as an hardcoded value, and generates the proper style dictionary.
         * Useful when dealing with ng-style and ng-class bindings.
         */
        getThemeClassOrStyle(varNameOrValue: string, postfix: string): {
            styleObj: {
                [styleKey: string]: string;
            };
            classStr: string;
        };
        /**
         * Gets the resolved value of the specified variable.
         */
        getThemeVariableValue(varName: string): string;
    }
    interface IEditableThemeVariable {
        category: string;
        description: string;
        type: string;
        value?: string;
    }
}
/**
 * Function used by external ION.NET embedding (WebBrowser)
 */
declare var ionweb_postMessage: (message: string) => void;
/**
 * Function used by external ION.NET embedding (WebBrowser) to communicate user and password are available
 */
declare var ionweb_userAndPasswordAvailable: (message: string) => void;
/**
 * Function used by external ION.NET embedding (WebBrowser) to communicate the selected theme is changed
 */
declare var ionweb_themeChanged: (message: string) => void;
declare namespace ionweb {
    /**
     * Reference to a child window
     */
    interface IChildWindow {
        /**
         * Start navigating to the given Angular route (without the leading '/') and search strings.
         * Configure the child window with some config additions (get/set). Leave null/undefined for default.
         * @param configAdditions the variation of the config settings
         * @param route the (angular) path of the SDK to open
         * @param search the (angular) search part of the SDK to open
         */
        loadSdk(configAdditions?: IConfig, route?: string, search?: {
            [key: string]: string;
        }): void;
        /**
         * Event raised when the child window is closed
         */
        closed: IEvent<void>;
        /**
         * Event raised when a custom request comes from a child window
         */
        handleMessage: IEvent<IMessageEventArgs>;
        /**
         * Try to focus/bring to front the external window
         */
        focus(): void;
        /**
         * Get the desktop layout of the child window (opaque)
         */
        layout: any;
        /**
         * Event raised when layout changes. The event transport the current layout.
         */
        layoutChanged: IEvent<any>;
    }
    /**
     * Service to create a child SDK window and communicate with it. Angular name: ionweb.childWindowService
     */
    interface IChildWindowService {
        /**
         * Open a new blank child (with no URL), to allow immediately call in stack with a user-triggered action (e.g. button's onClick).
         * If not called in-stack to an user-triggered action, the browser can deny the operation.
         * @param layout If passed, the dekstop layout to restore the previous child window position and size
         */
        openNew(layout?: any): IChildWindow;
    }
}
declare namespace ionweb {
    /**
     * About box settings
     */
    interface IAboutBox {
        /**
         * By default is true
         */
        showLogo?: boolean;
        /**
         * By default is true
         */
        showModules?: boolean;
        /**
         * By default is true
         */
        showCopyrightNotice?: boolean;
        /**
         * By default is true
         */
        showCurrentUser?: boolean;
        /**
         * By default is true
         */
        showVersion?: boolean;
    }
    /**
     * Branding interface
     */
    interface IBranding {
        aboutBox?: IAboutBox;
        /**
         * String is a generic map from key to value to override the SDK string resources
         */
        strings?: {
            [key: string]: string;
        };
        /**
         * Show branding logo instead of main-menu hamburger icon. false by default.
         */
        useBrandingLogoForMainMenu?: boolean;
        /**
         * Show branding logo in main-menu hamburger. false by default.
         */
        showBrandingLogoInMainMenu?: boolean;
    }
    /**
     * Local SDK configuration, section 'shell'. Can be overridden by ION.WEB server.
     */
    interface IShellConfig {
        /**
         * Show/Hide the privacy link in LoginDialog and AboutBox. By default it is visible.
         */
        hidePrivacyLink?: boolean;
        /**
         * Label of privacy statement link in LoginDialog and AboutBox, by default Privacy
         */
        privacyLinkLabel?: string;
        /**
         * Link URL of privacy statement in LoginDialog and AboutBox,  by default https://iongroup.com/privacy-statement/
         */
        privacyURL?: string;
        /**
         * Link ULR in LoginDialog, by default iongroup.com
         */
        loginDialogLinkURL?: string;
        /**
         * Copyright notice, by default the ION one
         */
        copyrightNotice?: string;
        /**
         * Link under copyright notice, by default iongroup.com
         */
        copyrightNoticeLink?: string;
        /**
         * Enable theme selector (by default true)
         */
        enableThemeSelector?: boolean;
        /**
         * Show builtin themes (by default true)
         */
        enableBuiltinThemes?: boolean;
        /**
         * Show the native context menu provided by the browser (by default false)
         */
        enableBrowserNativeContextMenu?: boolean;
        /**
         * Set the default theme name
         */
        theme?: string;
        /**
         * Set additional custom themes
         */
        themes?: ITheme[];
        /**
         * Allow additional .LESS content, that will override all available themes
         */
        themeOverride?: string;
        /**
         * URL to override the main branding logo
         */
        primaryBrandingLogoUrl?: string;
        /**
         * URL to define a branding logo in main toolbar
         */
        mainToolbarBrandingLogoUrl?: string;
        /**
         * Enable the new ION animated branding logo in login screen. Cannot set to false. Use 'still' to use the non-animated version.
         */
        ionAnimatedLogo?: boolean | "still";
        /**
         * Branding options
         */
        branding?: IBranding;
        /**
         * Disable the user authentication in order to force external authentication (even if not embedded). Overrides the disableEmbeddedAuthentication.
         */
        externalAuthentication?: boolean;
        /**
         * Enable/disable the automatic credential retrieval when the application is embedded (default: enabled)
         */
        disableEmbeddedAuthentication?: boolean;
        /**
         * When true switch on the dashboard feature. If 'desktop', only enables the dashboards on desktop devices. By default is always enabled.
         * If 'single' enables the single dashboard mode (as used in ION.NET embedded).
         */
        useDashboard?: boolean | "single" | "desktop";
        /**
         * When set to true, the nav bar is not shown. By default it is set to false (nav bar visible).
         */
        disableNavBar?: boolean;
        /**
         * When set to true, the nav bar is shown at the bottom. The nav bar is shown at the top by default.
         */
        navBarBottomPosition?: boolean;
        /**
         * Use deployed compiled css which generated from theme editor and deployed in module compiled-less folder.
         * @deprecated Use ION.Web Server 121 to compile LESS at server side instead.
         */
        useDeployedCompiledLessAdditions?: boolean;
        /**
         * Hide menu entry and disable action to open preference dialog. (by default false)
         */
        hidePreferenceDialog?: boolean;
        /**
         * Show density panel from navbar to select densities. (by default false)
         */
        showNavBarDensitySelector?: boolean;
        /**
         * Loads the Angular framework alongside AngularJS. By default is disabled.
         */
        angular?: boolean;
        /**
         * flag to disable animation in over all application
         */
        enableAnimations?: boolean;
        /**
         * Name of the module to use as default, if there is no configured view already.
         */
        defaultModule?: string;
        /**
         * Additional modules to load from local installation
         */
        localModules?: string[];
        /**
         * Additional pre-load modules to run before server connection. Used by automation tests.
         */
        preloadModules?: string[];
        /**
         * Name of the module to use as startup view, if present. The module must define a default component.
         * Optionally, specify the component id as well with the format: "module/component"
         */
        startupModule?: string;
        /**
         * Disable the old behavior when embedded in parent frame: the config will not be asked to the parent frame via channel API.
         * Use this flag, for example, if no special authentication flow should be implemented but SSON is used instead.
         */
        disableConfigInFrame?: boolean;
    }
    /**
     * Common config settings for toolkit controls.
     */
    interface IToolkitCommonSettings {
        showIconOnHover?: boolean;
    }
}
/**
 * Created by vincenzo.scolaro on 03/03/15.
 */
declare namespace ionweb {
}
declare var _window_href: string;
declare namespace ionweb {
}
declare namespace ionweb {
}
declare namespace ionweb {
    /**
     * The module entry-point handler type
     * @param registry the sdk registry passed in
     * @returns void or a promise to delay the shell loading until the promise is fullfilled (or failed)
     */
    type EntryPointHandler = (registry: IRegistry) => void | Q.IPromise<void>;
    /**
     * The module default resources provider.
     * @returns Object containing the default string resources.
     */
    type StringResourcesProvider = () => Object;
    /**
     * The module object returned by the ionweb.module call
     */
    interface ICodeModule {
        /**
         * Set the entrypoint handler (equivalent to run)
         * @param runHandler The entry-point handler.
         * @param [stringResourcesProvider] The string resource provider.
         * Used to load resources before entry point handler is invoked.
         */
        (runHandler: EntryPointHandler, stringResourcesProvider?: StringResourcesProvider): void;
        /**
         * Set the entrypoint handler (equivalent to the function signature)
         * @param runHandler The entry-point handler.
         * @param [stringResourcesProvider] The string resource provider.
         * Used to load resources before entry point handler is invoked.
         */
        run(runHandler: EntryPointHandler, stringResourcesProvider?: StringResourcesProvider): void;
    }
    /**
     * Options for IRegistry.export method
     */
    interface IExportOptions {
        /**
         * Names of modules (white list) that can access to the Javscript object being exported.
         * By default is not set (undefined/null), that means that the namespace is globally visible.
         * If set to an array, only the specified modules can access to that namespace.
         */
        friendModules?: string[];
    }
    /**
     * Used as parameter of module call
     */
    interface IRegistry {
        /**
         * Register a new category
         * @param id the Category unique id
         * @param displayName [optional] If declared, it creates a new category. If not declared it fetch the category with the specified id.
         *       If string array, it creates a new category with the specified path.
         */
        category(id: string, displayName?: string | string[]): ICategory;
        /**
         * Register string resources of given module.
         */
        stringResources?: Object;
        /**
         * Get/set the default component to show on the main screen
         */
        defaultComponent: IComponentType;
        /**
         * Edit the configuration data. Only available for master modules
         * @returns true if success, false if the module doesn't have the master module rights.
         */
        editConfig(handler: (config: IConfig) => void): boolean;
        /**
         * Retrieve the service instance
         */
        getService<T>(name: string): T;
        /**
         * Register css files additions to add custom style.
         * Paths are always relative to the module.
         */
        cssAdditions?: (string | IStyleSheetAddition)[];
        /**
         * Register less files additions to add custom style. Paths are always relative to the module.
         * @deprecated Use ION.WEB Server 121 and server-side compiled LESS instead (https://confluence.iontrading.com/display/RD/Module+theme+additions).
         * Should your LESS files being correctly registered in the .info file, you can safely remove this code setting.
         */
        lessAdditions?: (string | IStyleSheetAddition)[];
        /**
         * Register application provided icon set additions. Can be more than one icon set.
         */
        iconSetAdditions?: IIconSetAdditions[];
        /**
         * Get a promise that will be resolved when the module is fully initialized.
         * For example, this can be used to start services after the initialization finishes.
         */
        loaded: Q.Promise<void>;
        /**
         * Load an external library containing Angular modules and load it. If path is used, the promise will run asynchronously.
         * @param pathOrModule the path to the JS file (relative to the module), or the module already loaded
         * @param ngModuleName the name (or names) of the Angular modules contained in the JS package
         */
        loadAngularModule(pathOrModule: string | Object, ngModuleName: string | string[]): Q.Promise<void>;
        /**
         * Load a third party library from the SDK pack
         * @param name the library name
         * @param version the required version of the library. Any newer version will be considered ok. If not specified, uses 0.0.0 (any).
         * @returns a promise with the exported symbols of the library. The promise is rejected if the library is not found or the version is lower.
         */
        loadLibrary(name: string, version?: string): Q.Promise<any>;
        /**
         * Export a Javascript object to all module dependencies.
         * NOTE: Exporting an object with a name that is already present in the target module's space will raise an error during
         * the import stage.
         * @param name of the object being exported. Dotted notation are available (properties will be created if not yet available).
         * @param content the reference of the object being exported
         * @param options optional settings
         */
        export(name: string, content: any, options?: IExportOptions): void;
    }
}
declare namespace ionweb {
}
declare namespace ionweb {
    /**
     * Is Angular.X loaded (in addition to AngularJS)?
     */
    function isAngularLoaded(): boolean;
}
