/// <reference path="core.d.ts" />
declare namespace ionweb.cm {
    /**
     * Rounding modes
     */
    enum RoundingMode {
        /**
         * Round to nearest tick
         */
        Default = 0,
        /**
         * Round to next tick (ceiling)
         */
        Up = 1,
        /**
         * Round to previous tick (floor)
         */
        Down = 2,
    }
}
declare namespace ionweb.cm {
    namespace Internal {
        enum FormatType {
            Decimal = 0,
            Basispoint = 1,
            Half = 2,
            Quarter = 3,
            Eight = 4,
            Sixteenth = 5,
            Tens = 6,
            ThirtySecond = 7,
        }
    }
}
declare namespace ionweb.cm {
    /**
     * Enumerates all the ION-defined formatters
     */
    enum Format {
        Undef = -1,
        /**
         * No decimals.
         */
        Fmt0 = 0,
        /**
         * One decimal place.
         */
        Fmt1 = 1,
        /**
         * Two decimal place.
         */
        Fmt2 = 2,
        /**
         * Three decimal place.
         */
        Fmt3 = 3,
        /**
         * Four decimal place.
         */
        Fmt4 = 4,
        /**
         * Five decimal place.
         */
        Fmt5 = 5,
        /**
         * Six decimal place.
         */
        Fmt6 = 6,
        /**
         * Seven decimal place.
         */
        Fmt7 = 7,
        /**
         * Eight decimal place.
         */
        Fmt8 = 8,
        /**
         * Nine decimal place.
         */
        Fmt9 = 9,
        /**
         * Ten decimal place.
         */
        Fmt10 = 10,
        /**
         * Eleven decimal place.
         */
        Fmt11 = 11,
        /**
         * Twelve decimal place.
         */
        Fmt12 = 12,
        /**
         * Thirteen decimal place.
         */
        Fmt13 = 13,
        /**
         * Fourteen decimal place.
         */
        Fmt14 = 14,
        /**
         * Fifteen decimal place.
         */
        Fmt15 = 15,
        /**
         * NNN.[00-99][0 5]
         */
        Fmt20 = 20,
        /**
         * NNN.[00-99][0 2 4 6]
         */
        Fmt21 = 21,
        /**
         * NNN.[00-99][0 2 5 7]
         */
        Fmt22 = 22,
        /**
         * NNN.[00-99][0 1 2 3 4 5 6 7]
         */
        Fmt23 = 23,
        /**
         * NNNN.[0 2 5 7]
         */
        Fmt24 = 24,
        /**
         * NNN.[0-31]
         */
        Fmt25 = 25,
        /**
         * NNN.[0-63]
         */
        Fmt26 = 26,
        /**
         * NNN.[0-31][05]
         */
        Fmt27 = 27,
        /**
         * NNN.[00-31][0 2 5 7]
         */
        Fmt28 = 28,
        /**
         * NNN.[0-63][05]
         */
        Fmt29 = 29,
        /**
         * NNN.[00,05,10,15,....,95]
         */
        Fmt30 = 30,
        /**
         * NNNN.[0,5]
         */
        Fmt31 = 31,
        /**
         * NNN.[0-99][0,5]
         */
        Fmt32 = 32,
        /**
         * NNN.[00-99]
         */
        Fmt33 = 33,
        /**
         * NNN.[0-9]
         */
        Fmt34 = 34,
        /**
         * NNN.[0-999]
         */
        Fmt35 = 35,
        /**
         * NNNNN
         */
        Fmt36 = 36,
        /**
         * NNN.[0-9][0257]
         */
        Fmt37 = 37,
        /**
         * NNN.[00-99][00,25,50,75]
         */
        Fmt38 = 38,
        /**
         * NNN.[0-9999]
         */
        Fmt39 = 39,
        /**
         * NNN.[0246]
         */
        Fmt40 = 40,
        /**
         * NNN.[0-7]
         */
        Fmt41 = 41,
        /**
         * NNN.[0-15]
         */
        Fmt42 = 42,
        /**
         * NNN.[0-31]
         */
        Fmt43 = 43,
        /**
         * NNN.[0-31]+
         */
        Fmt44 = 44,
        /**
         * NNN.[00 - 31][02+6]
         */
        Fmt45 = 45,
        /**
         * NNN.[00 - 31][01234567]
         */
        Fmt46 = 46,
        /**
         * NNN.[00-31][0123+567]
         */
        Fmt50 = 50,
        /**
         *  NNN.[00-99][0 2 5 6]
         */
        Fmt51 = 51,
        /**
         * NNN.[00-99][0 1 5 3]
         */
        Fmt53 = 53,
        /**
         * SNNN.[01234567]
         */
        Fmt55 = 55,
        /**
         * NNN.[00-31][0-15]
         */
        Fmt58 = 58,
        /**
         * NNN.[00-31][0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, +, 4.5, 5, 5.5, 6, 6.5, 7, 7.5]
         */
        Fmt59 = 59,
        /**
         * NNN.[00-31][0, 01, 02, 03, 2, 05, 06, 07, +, 09, 10, 11, 6, 13, 14, 15]
         */
        Fmt60 = 60,
        /**
         * NNN.[00-31][0123+567]
         */
        Fmt256 = 256,
        /**
         * NNN.[0123+567]
         */
        Fmt257 = 257,
        /**
         * NNN.[00-31][01 02 03 + 05 06 07]
         */
        Fmt270 = 270,
        /**
         * NNN.[00-31] [+][123567]/8]
         */
        Fmt271 = 271,
        /**
         * NNN'[00-63][01 02 03 + 05 06 07]
         */
        Fmt272 = 272,
        /**
         * NNN.[00-31] [+][1-7  9-15/16]
         */
        Fmt273 = 273,
        /**
         * NNN.[00-31][;1 1 ;3 2 ;5 3 ;7 + ;9 5 ;11 6 ;13 7 ;15]
         */
        Fmt274 = 274,
        /**
         * NNN'[00-63]Â [+][123567/8]
         */
        Fmt275 = 275,
        /**
         * NNN.[0-31][0 00 2 25 5 50 7 75]
         */
        Fmt280 = 280,
        /**
         * Basis Point 0 Decimals
         */
        Fmt1000 = 1000,
        /**
         * Basis Point 1 Decimals
         */
        Fmt1001 = 1001,
        /**
         * Basis Point 2 Decimals
         */
        Fmt1002 = 1002,
        /**
         * Basis Point 3 Decimals
         */
        Fmt1003 = 1003,
        /**
         * Basis Point 4 Decimals
         */
        Fmt1004 = 1004,
        /**
         * Basis Point 5 Decimals
         */
        Fmt1005 = 1005,
    }
    /**
     * Optional arguments for the IFormatter.format function
     */
    interface IFormatterOptions {
        /**
         * Skip trailing zero in decimal part. By default is false.
         */
        removeTrailingZeros?: boolean;
        /**
         * Don't use the thousand separator. By default is false (separator present).
         */
        disableDefaultGroupSeparator?: boolean;
        /**
         * Apply rounding? Dy default is RoundingMode.Default
         */
        roundingMode?: RoundingMode;
    }
    interface IFormatter {
        /**
         * Format enumeration is an integer based enum. You can cast any int safely to for custom format registeration. (e.g. (Format)5000)
         */
        formatType: Format;
        /**
         * Format name.
         */
        name: string;
        /**
         * Format description.
         */
        desc: string;
        /**
         * Separator between whole and fractional parts of formatted value.
         */
        separator: string;
        /**
         * Group separator.
         */
        groupSeparator: string;
        /**
         * Default tick corresponding to format.
         */
        tick: number;
        /**
         * Try to parse a formatted value back to the number value. Returns NaN if it cannot be converted.
         */
        parse(formattedValue: string, validate?: boolean): number;
        /**
         * Format a value to a string
         */
        format(value: any, options?: IFormatterOptions): string;
    }
}
declare namespace ionweb.cm {
    class FormatAttribute {
        /**
         * Format Descriptor
         */
        desc: string;
        /**
         * Format Name
         */
        name: string;
        /**
         * Group separator to be used for the format.
         */
        groupSeparator: string;
        /**
         * Type of formatter.
         */
        formatType: Internal.FormatType;
        /**
         * Regex to be used to validate the input.
         */
        regex: string;
        /**
         * Format Separator. Replaced by the one passed from application if not defined when defining.
         */
        separator: string;
        /**
         * Decimal places after formatting.
         */
        decimalPlaces: number;
        /**
         * Custom multiplier for Basis Point format
         */
        customMultiplier: number;
        /**
         * Total ticks corresponding to format
         */
        totalTicks: number;
        /**
         * Primary part factor (e.g. 32 in case of 8th of 32nd)
         */
        primaryFactor: number;
        /**
         * Secondary part factor (e.g. 8 in case of 8th of 32nd)
         */
        secondaryFactor: number;
        /**
         * Format string to be used to provide the price format
         */
        formatString: string;
        /**
         * Ordered array of last part values.
         */
        lastPart: string[];
        /**
         * Manage trailing zeroes.
         */
        manageTrailingZeroes: boolean;
        constructor(formatType: Internal.FormatType);
    }
}
declare namespace ionweb.cm {
}
declare namespace ionweb.cm {
    class FormattersHelperSettings {
        /**
         * Separator to be used for fractional (US) prices
         */
        fractionalSeparator: string;
        /**
         * If true current culture will be taken care
         */
        constructor();
    }
}
declare namespace ionweb.cm {
    class FormatterBase implements IFormatter {
        formatType: Format;
        tick: number;
        name: string;
        groupSeparator: string;
        desc: string;
        separator: string;
        protected _formatAttribute: ionweb.cm.FormatAttribute;
        constructor(formatAttribute: ionweb.cm.FormatAttribute, formatType: Format, tick: number, customSeparator: string);
        protected readonly formatAttribute: ionweb.cm.FormatAttribute;
        readonly regex: string;
        readonly priceTypeGroup: ionweb.cm.Internal.FormatType;
        /**
         * Converts the given formatted string value to numeric value.
         * @param formattedValue
         * @returns {number}
         */
        parse(formattedValue: string, validate?: boolean): number;
        /**
         * Converts the given formatted string value to numeric value. Returns true if it succeeds and false otherwise.
         */
        _parse(formattedValue: string, validate?: boolean): number;
        /**
         * Formats the given value as per given format.
         * @param value
         * @param options
         * @returns {string}
         */
        format(value: any, options?: IFormatterOptions): string;
        _format(value: number, options: IFormatterOptions): string;
        /**
         * Returns the first part of formatted value by taking into account the handle, format separator and sign.
         * @param handle
         * @param sign
         * @returns {string}
         */
        protected getFirstPart(handle: number, sign?: string): string;
    }
}
declare namespace ionweb.cm {
}
declare namespace ionweb.cm {
    class FormatterFactory {
        private _fractionalSeparator;
        private _formatterCache;
        private _customFormatRegistry;
        constructor(formattersHelperSettings: FormattersHelperSettings);
        register(formatter: IFormatter): void;
        getFormatter(format: Format): IFormatter;
        private isDefaultFormatter(format);
        isFormatRegistered(format: Format): boolean;
        private createFormatter(format);
        getFormatAttribute(format: Format): FormatAttribute;
        private Initialize();
    }
}
declare namespace ionweb.cm {
    /**
     * Injectable with the 'ionweb.cm.formatterService' name
     */
    interface IFormatterService {
        /**
         * Retrieve a formatter instance for the given format code
         */
        getFormatter(fmt: Format): IFormatter;
        /**
         * Register an additional custom formatter for a non-standard Format value
         */
        registerFormatter(fmt: Format, formatter: IFormatter): void;
    }
}
declare namespace ionweb.cm {
}
