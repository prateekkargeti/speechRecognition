
/// <reference path="../typings/jquery/jquery.d.ts" />
/// <reference path="../typings/jqueryui/jqueryui.d.ts" />
/// <reference path="../typings/angularjs/angular.d.ts" />
/// <reference path="../typings/q/Q.d.ts" />
/// <reference path="common.d.ts" />
declare namespace ionweb {
}
declare module ionweb {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb {
    interface IClipboardService {
        copyToClipboard(content: string): void;
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    /**
     * The popup anchor point
     */
    enum PopupAnchorPoint {
        /**
         * Show the popup on the bottom-left edge.
         */
        BottomLeft = 0,
        /**
         * Show the popup on the bottom-right edge.
         */
        BottomRight = 1,
        /**
         * Show the popup on the top-left edge.
         */
        TopLeft = 2,
        /**
         * Show the popup on the top-left edge.
         */
        TopRight = 3,
        /**
         * Show the popup on the left-bottom edge.
         */
        LeftBottom = 4,
        /**
         * Show the popup on the bottom-top edge.
         */
        LeftTop = 5,
        /**
         * Show the popup on the right-bottom edge.
         */
        RightBottom = 6,
        /**
         * Show the popup on the right-top edge.
         */
        RightTop = 7,
        /**
         * Used to show popup inside anchor point at give position.
         */
        PositionProvided = 8,
        /**
         * Show the popup on the top-right edge, towards bottom direction, overlapping the anchor element.
         */
        TopRightInwards = 9,
    }
    /**
     * The popup position.
     */
    interface IPopupPosition {
        /**
         * The left offset.
         * @type {number}
         * @memberof IPopupPosition
         */
        left: number;
        /**
         * The top offset.
         * @type {number}
         * @memberof IPopupPosition
         */
        top: number;
    }
}
declare namespace ionweb.toolkit {
    interface IPopup {
        /**
         * Make the popup visible.
         */
        show(): void;
        /**
         * Make the popup disappear.
         */
        hide(): void;
        /**
         * Release any resources held by the popup. The popup cannot be used any longer afterwards.
         */
        destroy(): void;
        /**
         * Event raised whenever the popup is closed (always synchronized with Angular loop).
         */
        onClose: Event<void>;
    }
    interface IPopupOptions {
        /**
         * Automatically update the popup position anchor moves, changes size, gets closer to window edges, etc.
         * @type {boolean} true by default.
         * @memberof IPopupOptions
         */
        automaticallyUpdatePosition?: boolean;
        /**
         * Automatically close the popup when clicking outside of it.
         * @type {boolean} true by default.
         * @memberof IPopupOptions
         */
        automaticallyClose?: boolean;
        /**
         * This will make popup have minimum width to match with anchor element's width.
         * @type {boolean} false by default.
         * @memberof IPopupOptions
         */
        matchAnchorWidth?: boolean;
        /**
         * Than anchor point determining the popup position.
         * will try its best to obey the specified anchor point, otherwise it will re-position itself in order to remain visible and avoid going off-screen.
         * In edge case, where the popup is not able to show full content anywhere around the anchor element, it will be placed at the position where maximum visible space is available and scrolling will be enabled.
         * @type {PopupAnchorPoint} PopupAnchorPoint.BottomRight is used by default.
         * @memberof IPopupOptions
         */
        anchorPoint?: PopupAnchorPoint;
        /**
         * The popup position inside anchor point, related to top-left offset of anchor element.
         * Used only when anchorPoint is PopupAnchorPoint.PositionProvided
         * @type {IPopupPosition}
         * @memberof IPopupOptions
         */
        position?: IPopupPosition;
        /**
         * Show or hide anchor point arrow.
         * @type {boolean} false by default.
         * @memberof IPopupOptions
         */
        showAnchorPointArrow?: boolean;
    }
    /**
     * Service to create popups. Angular name: ionweb.popupService
     */
    interface IPopupService {
        /**
         * Create the popup with given template.
         * @param {string} template The popup content to show.
         * @param {JQuery} anchor The anchor element.
         * @param {ng.ISafeScope} [scope] The scope for popup content.
         * @param {IPopupOptions} [options] The popup options.
         * @returns {IPopup} The popup.
         */
        createWithTemplate(template: string, anchor: JQuery, scope?: ng.ISafeScope, options?: IPopupOptions): IPopup;
        /**
         * Create the popup with given templateUrl.
         * @param {string} templateUrl The popup content to show.
         * @param {JQuery} anchor The anchor element.
         * @param {ng.ISafeScope} [scope] The scope for popup content.
         * @param {IPopupOptions} [options] The popup options
         * @returns {Q.Promise<IPopup>} The promise with popup.
         * @deprecated Please use createPopup
         */
        create(templateUrl: string, anchor: JQuery, scope?: ng.ISafeScope, options?: IPopupOptions): Q.Promise<IPopup>;
        /**
         * Create the popup with given templateUrl.
         * @param {string} templateUrl The popup content to show.
         * @param {JQuery} anchor The anchor element.
         * @param {ng.ISafeScope} [scope] The scope for popup content.
         * @param {IPopupOptions} [options] The popup options
         * @returns {ng.IPromise<IPopup>} The Angular promise with popup.
         */
        createPopup(templateUrl: string, anchor: JQuery, scope?: ng.ISafeScope, options?: IPopupOptions): ng.IPromise<IPopup>;
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare type DomEvent = Event;
declare namespace ionweb.toolkit {
    const POPUP_CLASS_CONTAINER = "ionweb-popup-container";
}
declare namespace ionweb.toolkit {
    /**
     * The popup directive scope.
     */
    interface ISafePopupDirectiveScope extends ng.ISafeScope {
        /**
         * Is popup visible or not.
         * @type {boolean} false by default.
         */
        visible?: boolean;
        /**
         * Automatically update the popup position when anchor moves, changes size, gets closer to window edges, etc.
         * @type {boolean} true by default.
         */
        automaticallyUpdatePosition?: boolean;
        /**
         * Automatically close the popup when clicking outside of it.
         * @type {boolean} true by default.
         */
        automaticallyClose?: boolean;
        /**
         * This will make popup have minimum width to match with anchor element's width.
         * @type {boolean} false by default.
         */
        matchAnchorWidth?: boolean;
        /**
         * Destroy the popup when 'visible' is false or auto closed.
         * @type {boolean} true by default.
         */
        destroyOnHide?: boolean;
        /**
         * The anchor point determining the popup position.
         * will try its best to obey the specified anchor point, otherwise it will re-position itself in order to remain visible and avoid going off-screen.
         * @type {PopupAnchorPoint} PopupAnchorPoint.BottomRight is used by default.
         */
        anchorPoint: toolkit.PopupAnchorPoint;
        /**
         * Show or hide anchor point arrow.
         * @type {boolean} false by default.
         */
        showAnchorPointArrow: boolean;
        /**
         * @deprecated. It will be default to true. false is not recommended any more
         * If you set false, popup will be appended inline. We have found many problems on different browser from partially visible to not visible on different browser.
         * IOS safari is worst hit so this api is no more recommended and is deprecated right now. This is only available only for the backward compatibility of previous popups.
         */
        appendToBody?: boolean;
    }
    /**
     * The popup directive scope.
     * @deprecated Please use the ISafePopupDirectiveScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IPopupDirectiveScope extends ISafePopupDirectiveScope, ng.IScope {
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb {
    enum DialogResult {
        /**
         * Dialog result when Ok button is clicked.
         */
        Ok = 0,
        /**
         * Dialog result when Cancel button is clicked.
         */
        Cancel = 1,
    }
    /**
     * Interface of the modal dialog service (service name: ionweb.dialogService).
     * Dialogs can have a custom template with internal controllers and scope.
     * Standard buttons generate 'buttonClick' events on the scope whose preventDefault function will prevent the dialog from closing automatically.
     */
    interface IDialogService {
        /**
         * Show a standard dialog with text or custom content.
         * If another dialog is already shown, the new dialog is shown on top of the other one and only closing the top one make the other at the bottom to be reachable.
         * @param opts The options of the dialog to create
         * @returns The newly created dialog instance.
         */
        show(opts: IDialogCreateOptions): IDialog<any>;
        /**
         * Show a completely custom dialog UI (i.e. with no support for standard title and buttons).
         * If another dialog is already shown, the new dialog is shown on top of the other one and only closing the top one make the other at the bottom to be reachable.
         * @param opts The options of the dialog to create
         * @returns The newly created dialog instance.
         */
        showCustom(opts: ICustomDialogCreateOptions): IDialog<any>;
        /**
         * Show a standard non-closeable modal dialog with a single button to display a confirmation message.
         * The result promise resolves once the button is clicked.
         * @param content - can be either a string (rendered as standard dialog text) or an instance of ISimpleDialogCreateOptions
         * @param title Dialog title
         * @param okText Text to display in the button - defaults to "Ok"
         * @return The dialog object used to dismiss or retrieve the result.
         */
        showConfirmationDialog(content: string | ISimpleDialogCreateOptions, title?: string, okText?: string): IDialog<void>;
        /**
         * Show a standard non-closeable modal dialog with a positive and a negative button.
         * The positive button will have the accent color.
         * The result promise resolves with a result of 0 for positive and 1 for negative.
         * @param content - can be either a string (rendered as standard dialog text) or an instance of ISimpleDialogCreateOptions
         * @param title Dialog title
         * @param positiveText Text to display in the positive button - defaults to "Ok"
         * @param negativeText Text to display in the negative button - defaults to "Cancel"
         * @returns The dialog object used to dismiss or retrieve the result.
         */
        showQuestionDialog(content: string | ISimpleDialogCreateOptions, title?: string, positiveText?: string, negativeText?: string): IDialog<DialogResult>;
        /**
         * Show a standard non-closeable modal dialog with a custom set of buttons.
         * All buttons will have the accent color.
         * The result promise resolves with the index of the clicked button as result.
         * @param content - can be either a string (rendered as standard dialog text) or an instance of ISimpleDialogCreateOptions
         * @param buttons Array of strings to use as button titles.
         * @param title Dialog title
         * @returns The dialog object used to dismiss or retrieve the result.
         */
        showOptionDialog(content: string | ISimpleDialogCreateOptions, buttons: string[], title?: string): IDialog<number>;
        /**
         * Create and show a custom (empty) top-level non-modal window. Should you need support for standard title and buttons see showTopLevelDialog instead.
         * All created windows will be visible at the same time, with the same z-order of the opening order.
         * @param opts The options of the window to create
         * @returns The newly created window instance.
         */
        showTopLevelWindow(opts: ITopLevelWindowOptions): IDialog<void>;
        /**
         * Create and show a standard (with title and buttons) top-level non-modal dialog.
         * All created dialogs will be visible at the same time, with the same z-order of the opening order.
         * @param opts The options of the dialog to create
         * @returns The newly created dialog instance.
         */
        showTopLevelDialog(opts: ITopLevelDialogOptions): IDialog<any>;
        /**
         * @returns singelton instance of IDialogClassManager responsible for defining and keeping track of dialog class
         */
        dialogClassManager: IDialogClassManager;
    }
    /**
     * The base interface of a dialog
     */
    interface IDialog<T> {
        /**
         * Close the modal dialog. The result promise will fail.
         */
        dismiss(): void;
        /**
         * Get the result as promise. It will be rejected if the modal dialog will be canceled/dismissed.
         * @deprecated Please use closed (Angular promise, never rejected).
         */
        result: Q.Promise<T>;
        /**
         * Promise fullfilled when the dialog is closed. It will never be rejected.
         * @returns {value} the value of the button pressed. Null/undefined if cancelled.
         * @returns {cancel} true if the dialog was cancelled.
         */
        closed: ng.IPromise<{
            value?: T;
            cancel: boolean;
        }>;
        /**
         * method to bring the dialog to front - the method is supported (not null) only for non-modal dialogs
         */
        bringToFront?: () => void;
    }
    enum DialogSize {
        /**
         * Small size dialog.
         */
        Small = 0,
        /**
         * Large size dialog.
         */
        Large = 1,
        /**
         * Auto size dialog. Dialog width is as per its content.
         */
        Auto = 2,
        /**
         * Fixed size dialog. Dialog width and height is provided by application.
         */
        Fixed = 3,
    }
    enum DialogSeverity {
        /**
         * Dialog style for showing information.
         */
        Info = 0,
        /**
         * Dialog style for showing warnings.
         */
        Warning = 1,
        /**
         * Dialog style for showing errors.
         */
        Danger = 2,
        /**
         * Dialog style for showing successful result.
         */
        Success = 3,
    }
    interface IDialogPosition {
        /**
         * Dialog left position in pixels.
         */
        left: number;
        /**
         * Dialog top position in pixels.
         */
        top: number;
    }
    /**
     * Options for fixed size dialog
     */
    interface IFixedSizeDialogOptions {
        /**
         * The dialog width. If not provided, dialog width is as per its content.
         */
        width?: string;
        /**
         * The dialog height. If not provided, dialog height is as per its content.
         */
        height?: string;
    }
    /**
     * Options for draggable dialog.
     */
    interface IDraggableDialogOptions {
        /**
         * Is dialog draggable or not. False by default. Ignored for non-modal dialog (always draggable).
         */
        draggable?: boolean;
        /**
         * Optional: the class of the element that should be draggable. By default the title area will be used.
         * However if 'showCustom' is used (no standard caption) you can specify the class to use as drag handler.
         */
        headerClass?: string;
        /**
         * The initial position of dialog.
         */
        position?: IDialogPosition;
        /**
         * Callback, called when dialog position is changed due to dragging it.
         * @param dialogPosition The new dialog position.
         */
        onDialogPositionChanged?: (dialogPosition: IDialogPosition) => void;
    }
    /**
     * Common options for all modal dialogs
     */
    interface ICommonDialogCreateOptions {
        /**
         * Should the dialog be closed when you click outside? By default is false. When false, the dialog cannot be closed clicking outside the dialog itself.
         * Ignored for non-modal dialog.
         */
        canClose?: boolean;
        /**
         * The URL of the HTML AngularJs template of the dialog content.
         * Can be null only if template is valid.
         */
        templateUrl?: string;
        /**
         * The body of the HTML AngularJs template of the dialog content.
         * Can be null only if templateUrl is valid.
         */
        template?: string;
        /**
         * Specify the content as plain text instead of Angular template.
         */
        textContent?: string;
        /**
         * Set scope variables for the created modal dialog. If passed, the scope should always be destroyed by the caller.
         */
        scope?: ng.ISafeScope;
        /**
         * Size of the dialog window
         */
        size?: DialogSize;
        /**
         * Draggable dialog options.
         */
        draggableDialogOptions?: IDraggableDialogOptions;
        /**
         * Fixed sized dialog options.
         */
        fixedSizeDialogOptions?: IFixedSizeDialogOptions;
    }
    interface ICustomDialogCreateOptions extends ICommonDialogCreateOptions {
    }
    /**
     * Options for custom top-level windows (non-modal)
     */
    interface ITopLevelWindowOptions {
        /**
         * The URL of the HTML AngularJs template of the dialog content.
         * Can be null only if template is valid.
         */
        templateUrl?: string;
        /**
         * The body of the HTML AngularJs template of the dialog content.
         * Can be null only if templateUrl is valid.
         */
        template?: string;
        /**
         * Set scope variables for the created modal dialog
         */
        scope?: ng.ISafeScope;
        /**
         * Size of the dialog window
         */
        size?: DialogSize;
        /**
         * Draggable dialog options. The top-level is draggable by default and it cannot be disabled.
         */
        draggableDialogOptions?: IDraggableDialogOptions;
        /**
         * Enable dialog resizing, false by default.
         */
        resizable?: boolean;
    }
    /**
     * Options for top-level standard dialogs (non-modal)
     */
    interface ITopLevelDialogOptions extends ITopLevelWindowOptions {
        /**
         * The title of the dialog. By default is empty.
         */
        title?: string;
        /**
         * Should the standard X button to be rendered in the caption? By default is false.
         */
        canClose?: boolean;
        /**
         * Buttons to add at the bottom of the dialog. Each button can be set as primary to be displayed with the accent color.
         * The contained controller logic must listen to the 'buttonClick' event on its scope, whose argument is the index of the clicked button.
         */
        buttons?: (string | IDialogCreateOptionsButtonDefinition)[];
        /**
         * Buttons to be added in header.
         */
        captionButtons?: IDialogCaptionButton[];
        /**
         * Get/Set the severity (i.e. error/warning style)
         */
        severity?: DialogSeverity;
        /**
         * Class ID of dialog used for cascading
         */
        dialogClassID?: string;
    }
    interface ISimpleDialogCreateOptions extends ICommonDialogCreateOptions {
        /**
         * Get/Set the severity (i.e. error/warning style)
         */
        severity?: DialogSeverity;
        /**
         * Remove the spacing around dialog content, false by default.
         * When set to true the default spacing around content is removed and application is responsible to provide proper spacing in their content.
         */
        enableCustomSpacing?: boolean;
    }
    interface IDialogCreateOptionsButtonDefinition {
        /**
         * The button title. Required
         */
        title: string;
        /**
         * The button role. Can be primary, secondary or none.
         */
        role?: string;
        /**
         * The button color, only valid if role is primary. See <ionweb-button>.
         */
        color?: string;
        /**
         * The button icon name. See <ionweb-icon>
         */
        icon?: string;
        /**
         * The button icon placement. See <ionweb-button>
         */
        iconPlacement?: string;
    }
    interface IDialogCaptionButton {
        /**
         * The button icon name.
         */
        icon: string;
        /**
         * Called when the caption button is clicked.
         */
        onClick: () => void;
        /**
         * The icon color. Only valid palette color can be used.
         */
        iconColor?: string;
        /**
         * Enable or disable the button. false by default.
         */
        disabled?: boolean;
        /**
         * Tool-tip to be set on the button.
         */
        tooltip?: string;
    }
    /**
     * Option class for the IDialogService.show call.
     */
    interface IDialogCreateOptions extends ISimpleDialogCreateOptions {
        /**
         * The title of the dialog. By default is empty.
         */
        title?: string;
        /**
         * Buttons to add at the bottom of the dialog. Each button can be set as primary to be displayed with the accent color.
         * The contained controller logic must listen to the 'buttonClick' event on its scope, whose argument is the index of the clicked button.
         */
        buttons?: (string | IDialogCreateOptionsButtonDefinition)[];
        /**
         * Buttons to be added in header.
         */
        captionButtons?: IDialogCaptionButton[];
    }
    /**
     * The parent scope of the dialog template content
     */
    interface ISafeDialogScope extends ng.ISafeScope {
        /**
         * Closes the dialog and return the result object to the promise (see IDialog.result).
         */
        complete(result?: any): void;
        /**
         * Closes the dialog rejecting the promise (see IDialog.result).
         */
        cancel(reason?: any): void;
        /**
         * Access to individual button states, to enable or disable them from the dialog controller logic
         */
        buttonStates: {
            enabled: boolean;
        }[];
    }
    /**
     * The parent scope of the dialog template content (unsafe version)
     * @deprecated Please use ISafeDialogScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDialogScope extends ISafeDialogScope, ng.IScope {
    }
    /**
     * Options used for defining a new class.
     * It used for deciding the next location of the dialog belong to the defined class
     */
    interface IDialogClassOptions {
        /**
         * Horizontal displacement, by which next dialog will be displaced.
         */
        stepX?: number;
        /**
         * 	Vertical displacement, by which next dialog will be displaced.
         */
        stepY?: number;
    }
    /**
     * Dialog class Manager
     */
    interface IDialogClassManager {
        /**
         * Define class
         */
        defineClass(id: string, opt?: IDialogClassOptions): void;
        /**
         * Close all dialogs of provided class id
         */
        closeAllDialogs: (classID: string) => void;
    }
}
declare namespace ionweb.dialogs {
}
declare namespace ionweb {
    /**
     * The context menu items type.
     */
    enum MenuItemType {
        /**
         * Normal menu item.
         */
        General = 0,
        /**
         * Create a divider item.
         */
        Divider = 1,
        /**
         * Create a custom menu item as per given template or templateUrl.
         */
        Custom = 2,
        /**
         * Create a sub-menu item.
         */
        Submenu = 3,
        /**
         * Create a check-box item.
         */
        Checkbox = 4,
    }
    /**
     * The context menu anchor point. Used only when position is not provided.
     */
    enum ContextMenuAnchorPoint {
        /**
         * Show context menu at bottom-left edge of anchor element.
         */
        BottomLeft = 0,
        /**
         * Show context menu at bottom-right edge of anchor element.
         */
        BottomRight = 1,
        /**
         * Show context menu at top-left edge of anchor element.
         */
        TopLeft = 2,
        /**
         * Show context menu at top-right edge of anchor element.
         */
        TopRight = 3,
        /**
         * Show context menu at left-bottom edge of anchor element.
         */
        LeftBottom = 4,
        /**
         * Show context menu at left-top edge of anchor element.
         */
        LeftTop = 5,
        /**
         * Show context menu at right-bottom edge of anchor element.
         */
        RightBottom = 6,
        /**
         * Show context menu at right-top edge of anchor element.
         */
        RightTop = 7,
    }
    /**
     * Describes a menu item for the IContextMenuService
     */
    interface IMenuObject {
        /**
         * The menu type. General by default.
         * Will be auto detected for custom, sub-menu and divider type of menu if template or templateUrl, subMenu array is provided or isDivider is set to true.
         */
        menuType?: MenuItemType;
        /**
         * The menu item text to display.
         */
        text?: string;
        /**
         * tooltip to be displayed on menu item.
         */
        tooltip?: string;
        /**
         * Is menu item disabled or not. false by default.
         */
        disabled?: boolean;
        /**
         * The menu item click actions. Will be called when menu item is clicked.
         * Not used for item type Submenu.
         */
        action?: () => void;
        /**
         * The sub-menus of current menu item. Sub-menu will not be shown if array is empty or not provided.
         */
        subMenu?: IMenuObject[];
        /**
         * Show divider. false by default.
         */
        isDivider?: boolean;
        /**
         * The icon for menu item. Not used in case of custom menu item.
         */
        icon?: string;
        /**
         * Is item checked or not. false by default.
         */
        checked?: boolean;
        /**
         * When set to false, menu will not be closed by click on item. true by default.
         */
        autoClose?: boolean;
        /**
         * groupId will help in identifying list of options grouped in context menu at given level.
         * for example: list of menus like sum, aggregation, avg, min will have same group id "ops" then only one of them will be "on" at one point of time.
         */
        groupId?: string;
        /**
         * Template-url for Custom menu item.
         */
        templateUrl?: string;
        /**
         * Template for Custom menu item. Used when templateUrl is not provided.
         */
        template?: string;
        /**
         * Scope for Custom menu item.
         */
        scope?: ng.ISafeScope;
    }
    /**
     * The context menu.
     */
    interface IContextMenuWrapper {
        /**
         * Close the context menu.
         */
        close(): void;
    }
    /**
     * The context menu position.
     */
    interface IContextMenuPosition {
        /**
         * Menu left position in pixels.
         */
        left: number;
        /**
         * Menu top position in pixels.
         */
        top: number;
    }
    /**
     * Options for context menu.
     */
    interface IContextMenuOptions {
        /**
         * The context menu position, in pixels.
         */
        position?: IContextMenuPosition;
        /**
         * The context menu anchor point. Used only when position is not provided.
         */
        anchorPoint?: ContextMenuAnchorPoint;
        /**
         * Callback, called when context menu is destroyed.
         */
        onDestroy?: () => void;
        /**
         * Callback, called when context menu is created.
         * @param menu The context menu.
         */
        onCreate?: (menu: IContextMenuWrapper) => void;
    }
    /**
     * The context menu service
     */
    interface IContextMenuService {
        /**
         * Attach the context menu handler to a HTML element
         * @param element The element where the context menu should be attached. Nested element will react too to context menu stimulus.
         * @param contextMenuHandler The handler called immediately before the context menu is rendered. Return null or empty array to cancel the menu creation.
         * @param [customHandler] The handler to provide a custom context menu without passing from the default one. If this is provided, then contextMenuHandler will not be invoked.
         * @param [options] The options for context menu.
         */
        attachElement(element: JQuery, contextMenuHandler: IContextMenuHandler, customHandler?: IContextMenuCustomHandler, options?: IContextMenuOptions): void;
        /**
         * Detach a previously attached context menu handler from a HTML element
         */
        detachElement(element: JQuery): void;
        /**
         * Open a new context menu on the given event target.
         * @param entries The menu items to show.
         * @param eventTarget The target element on which to open context menu.
         * @param [options] The options for context menu.
         */
        openContextMenu(entries: IMenuObject[], eventTarget: EventTarget, options?: IContextMenuOptions): void;
    }
    /**
     * The context menu handler.
     * @param element The element on which right-click happened.
     * @returns Array of IMenuObject, the items to show in context menu.
     */
    interface IContextMenuHandler {
        (element: HTMLElement): IMenuObject[];
    }
    /**
     * The custom handler for context menu.
     * @param element The element on which right-click happened.
     * @param options The options provided to context menu.
     */
    interface IContextMenuCustomHandler {
        (element: HTMLElement, options: IContextMenuOptions): void;
    }
    /**
     * The context menu directive.
     */
    interface ISafeContextMenuDirectiveScope extends ng.ISafeScope {
        /**
         * The handler called immediately before the context menu is rendered. Return null or empty array to cancel the menu creation.
         */
        ionwebContextMenuHandler: IContextMenuHandler;
        /**
         * The handler to provide a custom context menu without passing from the default one. If this is provided, then contextMenuHandler will not be invoked.
         */
        customHandler?: IContextMenuCustomHandler;
        /**
         * The options for context menu.
         */
        options?: IContextMenuOptions;
    }
    /**
     * The context menu directive.
     * @deprecated Please use ISafeContextMenuDirectiveScope, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IContextMenuDirectiveScope extends ISafeContextMenuDirectiveScope, ng.IScope {
    }
}
declare namespace ionweb {
    interface ILongTouchHandlerService {
        registerHandler: (element: JQuery, handler: (target: HTMLElement, pageX: number, pageY: number) => void) => void;
        unregisterHandler: (element: JQuery) => void;
    }
}
declare namespace ionweb.validation {
    /**
     * Interface representing a single error/warning entry/bar in validation summary panel.
     */
    interface IValidationEntry {
        /**
         * Unique identifier for each entry
         */
        key: string;
        /**
         * Error or warning state
         */
        validationState: validation.ValidationState;
        /**
         * Field name to be displayed.
         */
        field?: string;
        /**
         * Error/warning message.
         */
        message?: string;
        /**
         * Template string or URL. This template will be compiled against templateScope.
         */
        template?: string;
        /**
         * Scope for compiling template.
         */
        templateScope?: ng.ISafeScope;
    }
    interface ISafeValidationSummaryScope extends ng.ISafeScope {
        /**
         * ng-model
         */
        entries: IValidationEntry[];
        /**
         * Configuration to provide custom/override default ordering/grouping of errors/warnings.
         * Defaults to false, which means by default errors will be shown at top with order as entries added by the application.
         */
        disableGroupingOnErrorWarning: boolean;
        /**
         * Called when validation summary directive is rendered. Controller object is passed as argument.
         * @param validationSummary
         */
        onValidationSummaryLoad: (validationSummary: IValidationSummaryController) => void;
        /**
         * Custom panel title
         */
        panelTitle?: string;
        /**
         * Hide panel title
         */
        hideTitle?: boolean;
    }
    /**
     * @deprecated Please use the ISafeComponentScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IValidationSummaryScope extends ISafeValidationSummaryScope, ng.IScope {
    }
    interface IValidationSummaryController {
        /**
         * Returns validation object with matching key in ng-model array.
         * @param key
         */
        getValidationEntry(key: string): void;
        /**
         * Refreshes summary.
         */
        refreshSummary(): void;
    }
}
declare namespace ionweb.validation {
}
declare namespace ionweb {
    /**
     * Service for responsiveness facilities (service name: ionweb.responsivenessService)
     */
    interface IResponsivenessService {
        /**
         * Listen to HTML element size updates.
         */
        register(element: HTMLElement, callback: IResizeObserverHandler): IResponsivenessServiceRegistrationResult;
    }
    /**
     * Callback to be fired after every detected size update.
     */
    type IResizeObserverHandler = (args: ISizeInfo) => void;
    /**
     * Contains the current size of the element. Call this object in order to unregister the element.
     */
    interface IResponsivenessServiceRegistrationResult {
        /**
         * the inizial size, detected at registration time
         */
        initialSize: ISizeInfo;
        /**
         * unregister method, to unsubscribes listeners
         */
        (): void;
        /**
         * forces the computation of the size
         */
        computeCurrentSize(): ISizeInfo;
    }
    /**** THE DIRECTIVE **************/
    interface ISafeResponsiveContentDirectiveScope extends ng.ISafeScope {
        responsivenessTemplate: string;
    }
    /**
     * @deprecated Please use the ISafeResponsiveContentDirectiveScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IResponsiveContentDirectiveScope extends ISafeResponsiveContentDirectiveScope, ng.IScope {
    }
}
declare namespace ionweb {
    /**
     * Service to access environment features and status (service name: ionweb.environmentService)
     */
    interface IEnvironmentService {
        /**
         * return TRUE whenever the app runs on a touch device. FALSE otherwise.
         */
        isTouchDevice(): boolean;
        /**
         * return TRUE if the device is detected as a mobile
         */
        isMobileDevice(): boolean;
    }
    /**
     * Represents the orientation of application on mobile
     *
     */
    enum Orientation {
        None = 0,
        Potrait = 1,
        Landscape = 2,
    }
}
declare namespace ionweb {
    /**
     * These are our responsive boundaries, bound is expressed in em widths
     * of the parent container and represents the smallest width for which the
     * template suffix will be used, if it exists
     */
    interface IDesignSize {
        name: string;
        bound: number;
    }
    /**
     * Describe the current size
     */
    interface ISizeInfo {
        emWidth: number;
        emHeight: number;
        width: number;
        height: number;
        designSize: IDesignSize;
    }
}
declare namespace ionweb {
    /**
     * The kind of operation that is currently selected
     */
    enum DnDDropEffect {
        /**
         * the item may not be dropped.
         */
        None = 0,
        /**
         * a copy of the source item is made at the new location.
         */
        Copy = 1,
        /**
         * an item is moved to a new location.
         */
        Move = 2,
        /**
         * a link is established to the source at the new location.
         */
        Link = 3,
    }
    /**
     * The kinds of operations that are to be allowed
     */
    enum DnDEffectAllowed {
        None = 0,
        Copy = 1,
        Move = 2,
        Link = 4,
        CopyLink = 5,
        CopyMove = 3,
        LinkMove = 6,
        All = 7,
    }
    /**
     * Object shared between all the Drag and Drop events of the same drag and drop session
     */
    interface IDnDDataTransfer {
        /**
         * Get the currently selected operation
         * note: dropping from different windows or desktop application always 'None' will be returned
         */
        getDropEffect(): DnDDropEffect;
        /**
         * Get the allowed operations
         */
        getEffectAllowed(): DnDEffectAllowed;
        /**
         * Set the allowed operations
         * @param effectAllowed represent the effect allowed by the source
         */
        setEffectAllowed(effectAllowed: DnDEffectAllowed): void;
        /**
         * set the data to transfer for the given format type
         * data must be a serializable object
         * note: dragging between different windows or desktop application only 'text' format is supported
         * @param format represent the format of the data to transfer, pass 'Text' to support dragging among different windows/applications
         * @param data is the data to transfer between source and target
         */
        setData(format: string, data: any): void;
        /**
         * retrieve the data for the passed format type
         * @param format is one of the available formats set by the source
         */
        getData(format: string): any;
        /**
         * return all available formats
         */
        availableFormats(): string[];
        /**
         * When a drag occurs, on desktop browsers, a translucent image is generated from the drag target. On mobile browsers, instead, a placeholder is placed under the finger
         * This method allows the customization of the custom behaviour.
         * Note: not supported by IE
         * @param placeholder is the HTML element that replace the default one.
         * @param xOffset is the horizontal offset
         * @param yOffset is the vertical offset
         */
        setDragPlaceholder(placeholder: HTMLElement, xOffset?: number, yOffset?: number): void;
        /**
         * If provided shows to the user a trash droppable target. It is settable only into a dragStart context.
         * @param dataTransfer is the object shared during all the DnD operation
         */
        dropToDelete?: (dataTransfer: IDnDDataTransfer) => void;
    }
}
declare namespace ionweb {
    interface IDnDEvent extends MouseEvent {
        target: HTMLElement;
    }
}
declare namespace ionweb.toolkit {
    /**
     * Fields supported by ionweb-icon directive as Angular scope
     */
    interface ISafeIonIconScope extends ng.ISafeScope {
        /**
         * The icon used for the switch
         */
        icon?: string;
        /**
         * Can be on of the palette color
         */
        color?: string;
    }
    /**
     * Fields supported by ionweb-icon directive as Angular scope
     * @deprecated Please use ISafeIonIconScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IIonIconScope extends ISafeIonIconScope, ng.IScope {
    }
}
declare namespace ionweb {
    /**
     * A font-based icon
     */
    interface ICssFontIcon {
        /**
         * Key used to reference the icon
         */
        key: string;
        /**
         * CSS class to use for the icon
         */
        cssClass: string;
    }
    /**
     * A font-based icon set
     */
    interface ICssFontIconSet {
        /**
         * Icon set name.
         */
        name: string;
        /**
         * Read-only collection of icons contained in the set
         */
        icons: {
            [key: string]: ICssFontIcon;
        };
    }
    /**
     * The Icon Service (name ionweb.iconService)
     */
    interface IIconService {
        /**
         * Get the default icon set
         */
        getDefaultSet(): ICssFontIconSet;
        /**
         * Get the specified icon set.
         * @param name The name of icon set.
         */
        getIconSet(name: string): ICssFontIconSet;
        /**
         * Register an icon set.
         */
        registerIconSet(iconSet: IIconSetAdditions): void;
    }
    /**
     * Register application provided icon set.
     */
    interface IIconSetAdditions {
        /**
         * The name of icon set.
         */
        name: string;
        /**
         * The relative path of font files without extension.
         * Do not provide extension like .eto, .ttf, etc along with filename.
         */
        fontFile: string;
        /**
         * The font family of icon set.
         * If not provided then icon set name is used.
         */
        fontFamily?: string;
        /**
         * The list of icons (simple array of names or mapping between name and character).
         */
        iconKeys?: string[] | {
            [name: string]: string;
        };
    }
    /**
     * Config value to customize the icon path (config name ionweb.getIconPath)
     */
    interface IIconPathGetter {
        /**
         * Translate a font file name to a absolute/relative path
         */
        (path: string): string;
    }
}
declare namespace ionweb.toolkit {
    /**
     * Fields supported by ionweb-button directive as Angular scope
     */
    interface ISafeIonButtonScope extends ISafeIonIconScope {
        /**
         * Can be 'before' or 'after'
         */
        iconPlacement?: string;
        /**
         * Can be 'primary', 'secondary' or nothing (default)
         */
        role?: string;
        /**
         * color for the icon on button.
         */
        iconColor?: string;
    }
    /**
     * Fields supported by ionweb-button directive as Angular scope
     * @deprecated Please use ISafeIonButtonScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IIonButtonScope extends ISafeIonButtonScope, IIonIconScope {
    }
}
declare namespace ionweb.toolkit {
    /**
     * Scope of the ionweb-switch directive
     */
    interface ISafeIonSwitchScope extends ISafeIonIconScope {
        /**
         * Can be 'before' or 'after'
         */
        iconPlacement?: string;
        /**
         * The icon used for the switch when it is on. Overrides 'icon'.
         */
        iconOn?: string;
        /**
         * The icon used for the switch when it is off. Overrides 'icon'.
         */
        iconOff?: string;
        /**
         * The text displayed in the switch when it is on. Overrides the button content.
         */
        textOn?: string;
        /**
         * The text displayed in the switch when it is off. Overrides the button content.
         */
        textOff?: string;
        /**
         * The button state, clicked or not clicked
         */
        state: boolean;
        /**
         * Toggle the button state
         */
        toggle(): void;
        style?: string;
    }
    /**
     * @deprecated Please use ISafeIonSwitchScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IIonSwitchScope extends ISafeIonSwitchScope, IIonIconScope {
    }
}
/**
 * This plugin overrides default addItem behaviour to improve ACB load performance
 * by avoiding refreshOptions on addItem in case of single select ACB.
 */
declare namespace ionweb.toolkit {
}
/**
 * Enhance keyboard options for item navigation:
 * - add page/up and page/down
 * - select text on keyboard up/down navigation
 * - ESC revert to original text
 * - Tab and Enter works like blur when createOnBlur = true, using the score function to check if create or use the selected option
 *
 *  TODO: This code is a mess. A better solution should be fork selectize.js and put hooks in the correct points to avoid 'ignoreNextKeyUp' stuff here
 */
declare namespace ionweb.toolkit {
}
/**
 * Performes advanced auto selection of dropdown options, helpful when the always visible options are present
 */
declare namespace ionweb.toolkit {
}
/**
 * Auto-select the text when the control is focused.
 * The plugin operate only on single mode selection.
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * This plugin overrides the clearOptions behaviour to avoid to call self.clear() that clear the user selection.
 * In addition overrides the updateOriginalInput in order to avoid assuming that the selected items is already present
 */
declare namespace ionweb.toolkit {
}
/**
 * Copy/Paste selected items to/from clipboard.
 * Provide option to application to validate what is being pasted
 */
declare namespace ionweb.toolkit {
}
/**
 * This plugin overrides the refreshOption plugin for different reason:
 * - override the highlight function
 * - avoid having always an active option
 * - specifying a custom highlight function
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * This plugin allows the dropdown to fit to its content
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * Plugin responsible for loading acb with initialized value.
 * It uses option provider to get option which are searched yet and not available in database.
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * This plugin overrides the removeItem and clear behavior in order to remove free options from the dropdown
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * This plugin update the place-holder, removes it if place-holder is not provided or is empty string.
 */
declare namespace ionweb.toolkit {
}
/****
 * NOT COMPLETE - Several glitches to resolve
 */
/**
 * This plugin manages the visibility of the arrow on the right
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * remove functionality related to selection of next item when
 * an item is selected from the dropdown.
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
/**
 * Scroll Item in acb to left/right in order to scroll
 * through all the selected items in multi mode selection.
 */
declare namespace ionweb.toolkit {
}
/**
 * remove the height and max-height when template is
 * provided for the item selection.
 */
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    /**
     * The descriptor of an option of the autocomplete directive ('ionweb-autocomplete')
     */
    interface IAutocompleteOption {
        value: string;
        label?: string;
        group?: string;
        alwaysShown?: boolean;
    }
    /**
     * Signature of the IQueryFunction result
     */
    interface IQueryFunctionResult {
        /**
         * Matching options
         */
        options: IAutocompleteOption[];
        /**
         * Total count of items in the DB (for footer info)
         */
        total?: number;
    }
    /**
     * Exec a query search, and returns the matching items or a promise for them
     */
    type IQueryFunction = (query: string) => IQueryFunctionResult | Q.IPromise<IQueryFunctionResult> | ng.IPromise<IQueryFunctionResult>;
    /**
     * Signature to recieve options for dynamic query function type ACB
     */
    type IOptionProviderFunction = (value: string) => ng.IPromise<IAutocompleteOption> | IAutocompleteOption;
    /**
     * The autocomplete object reference, obtained by IAutocompleteScope.onBound()
     */
    interface IAutocomplete {
        /**
         * Get/set the serializable state of the autocpmplete (e.g. last selected items)
         */
        state: Object;
        /**
         * Clear the cache results
         */
        clearCache: () => void;
        /**
         * Provide a way to clear cached items and start a new query to popolate the widget options.
         * It is helpful only in case of options provided as function
         * @deprecated Please use reset (Angular promise)
         */
        reload(): Q.Promise<void>;
        /**
         * Provide a way to clear cached items and start a new query to popolate the widget options.
         * It is helpful only in case of options provided as function
         */
        reset(): ng.IPromise<void>;
        /**
         * Refresh options if application modify/add/remove options inside the options array provided by client
         * It is helpful in case of options array is not changed entirely and user wants there changes reflected inside ACB.
         * This function is available only for static options ACB.
         */
        refreshOptions: () => void;
        /**
         * Set search value in autocomplete input text
         */
        setSearchText: (text: string) => void;
        /**
         * Provides a way to explicitly set the focus on ACB
         */
        focus: () => void;
    }
    /**
     * Object to define autocomplete options
     */
    interface IAutocompleteScopeOptions {
        /**
         * Optional callback to obtain a reference to the auto-complete object.
         */
        onAutocompleteBound?: (autocomplete: IAutocomplete) => void;
    }
    interface IFooterOptions {
        /**
         * Footer template, to specify the footer template as string.
         */
        footerTemplate: string;
        /**
         * Footer scope, to specify the footer template scope.
         */
        footerScope?: ng.ISafeScope;
    }
    /**
     * Scope of ionweb-autocomplete directive
     */
    interface ISafeAutocompleteScope extends ng.ISafeScope {
        /**
         * Source from which to display suggestions.
         * Can be an IAutocompleteOption array, a function returning an IAutocompleteOption array or a function returning a promise of IAutocompleteOption array.
         */
        options: IAutocompleteOption[] | IQueryFunction;
        /**
         * callback invoked in case of ACB with dynamic data. ACB calls optionProvider each time an item is set programmatically, to dynamically retrieve the available options. By default, if a callback is not defined, the item passed as string id is considered as the item added.
         */
        optionProvider: IOptionProviderFunction;
        /**
         * Option template, alternative to specifying it inline inside the directive tag.
         */
        optionTemplate: string;
        /**
         * Option template item name, alternative to specifying it inline inside the directive tag.
         */
        optionTemplateItemName: string;
        /**
         * Footer Options, alternative to specifying it inline inside the directive tag.
         */
        footerOptions?: IFooterOptions;
        /**
         * Placeholder text to show as a watermark in the textbox. By default it is empty. String Angular binding (@).
         */
        placeholder?: string;
        /**
         * Is the box disabled? By default is false. Bi-directional Angular scope binding (=).
         */
        disabled?: boolean;
        /**
         * Is the box readonly? By default is false. Bi-directional Angular scope binding (=).
         */
        readonly?: boolean;
        /**
         * Disable sorting supported by Selectize
         */
        disableDefaultSorting: boolean;
        /**
         * You can enable/disable allow empty value in auto complete box
         */
        allowEmptyValue: boolean;
        /**
         * Is the box allowing entering text not matching the items? By default is false. Bi-directional Angular scope binding (=).
         */
        allowFreeText?: boolean;
        /**
         *
         */
        editable: boolean;
        /**
         * Allow multiple selection? By default is false. Bi-directional Angular scope binding (=).
         */
        multiple?: boolean;
        /**
         * Limit the search results in the dropdown? By default not set or zero (no limit). Bi-directional Angular scope binding (=).
         */
        limit?: number;
        /**
         * The name of the item field representing the key value. By default is 'value'. String Angular binding (@).
         */
        valueField?: string;
        /**
         * The name of the item field(s) representing the string label to render by default renderer. By default is 'label'.
         * String Angular binding (@).
         */
        labelField?: string;
        /**
         * The name of the item field(s) representing the string label to search. Multiple value can be comma or space separated.
         * By default is 'label'.
         * String Angular binding (@).
         */
        searchField?: string;
        /**
         * Show/Hide dropdown arrow. By default is true. Bi-directional Angular scope binding (=).
         */
        showArrowButton?: boolean | VisibilityType;
        /**
         * Show/Hide clear button. By default is true. Bi-directional Angular scope binding (=).
         */
        showClearButton?: boolean | VisibilityType;
        /**
         * Whether the user button should be hidden or not.
         */
        showUserButton?: boolean | VisibilityType;
        /**
         * Set ion icon associated to the user button.
         */
        userButtonIcon?: string;
        /**
         * Set action associated to the user button.
         */
        userButtonAction?: () => void;
        /**
         * Show/Hide the footer. By default is false. Bi-directional Angular scope binding (=).
         */
        showFooter?: boolean;
        /**
         * If set, auto-focus the ACB when created
         */
        autofocus: boolean;
        /**
         * Disable the control cache results. Default is false.
         */
        disableCache?: boolean;
        /**
         * Invoked when the user types while filtering options.
         */
        onTextChange: (arg: {
            value: string;
        }) => void;
        /**
         * Invoked when the control gains focus.
         */
        onFocus: () => void;
        /**
         * Invoked when the control loses focus.
         */
        onBlur: () => void;
        /**
         * Invoked when something is being paste on ACB.
         * @deprecated No more required while pasting items in ACB.
         */
        validatePaste: (arg: {
            value: any;
        }) => boolean | Q.IPromise<boolean>;
        /**
         * Optional scope options/settings
         */
        scopeOptions?: IAutocompleteScopeOptions;
        /**
         * Validation state for ACB.
         */
        validationState?: validation.ValidationState;
        /**
         * Message to be displayed in tooltip when in error/warning state.
         */
        validationMessage?: string;
        /**
         * provide default shake animation when it is true. Default value is false
         */
        errorAnimation?: boolean;
        /**
         * tabindex.
         */
        tabindex?: number;
        /**
         *
         * Customize search/filter behaviour using this option.
         */
        queryOptions?: IAutocompleteQueryOptions;
        /**
         * if key is defined then paste action will be allowed only
         * if value copied from source ACB has also the same key value.
         */
        key?: string;
        /**
         * If true, reloads the options in the dropdown if they are provided through a function (dynamic options)
         */
        reloadOnModelChange?: boolean;
        /**
         * If true, it will show select all option on top of options header
         */
        enableSelectAll?: boolean;
        /**
         * If true, it will hide selected options from list
         */
        showSelectedOption?: boolean;
        /**
         * If true, Autocomplete will not do spellcheck while typing. Default is false
         */
        disableSpellCheck?: boolean;
        /**
         * Delimeter
         */
        itemDelimiter: string | boolean;
        /**
         * Enables the navigation through mouse by placing the cursor between items
         */
        enableMouseNavigation: boolean;
    }
    /**
     * Scope of ionweb-autocomplete directive
     * @deprecated Please use the ISafeComponentScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IAutocompleteScope extends ISafeAutocompleteScope, ng.IScope {
    }
    /**
     * Object to define ACB options filtering behaviour.
     */
    enum AutocompleteFilterCriteria {
        /**
         * Complete text entered in input field is treated as single token.
         */
        SingleToken = 0,
        /**
         * All the words entered in ACB input box with space separator are treated as separate tokens.
         */
        MultiToken = 1,
        /**
         * With this option ACB options will be filtered with searchField starts with text entered in ACB input box.
         */
        StartsWith = 2,
    }
    /**
     * Object to define ACB options filtering & sorting behaviour.
     */
    interface IAutocompleteQueryOptions {
        /**
         * Filter options using either single token or multiple tokens or starts with.
         */
        filterCriteria?: AutocompleteFilterCriteria;
        /**
         * Option to indicate if query need to be done in case sensitive mode. False by default (case insensitive).
         */
        isCaseSensitive?: boolean;
    }
}
declare namespace ionweb.toolkit {
    /**
     *Enum for SpinnerPosition
     */
    enum SpinnerPosition {
        ButtonOnRight = 0,
        ButtonOnLeft = 1,
        WrapHorizontal = 2,
        WrapVertical = 3,
    }
    enum UpdateTickMode {
        Increment = 0,
        Decrement = 1,
    }
    /**
     * Tool bar button
     */
    interface INumericUpDownToolBarButton {
        tickValue: number;
        displayName: string;
    }
    /**
     * The numeric up-down options.
     */
    interface ISafeNumericUpDownScope extends ng.ISafeScope {
        /**
         * Current value of the control. Control can be initialized with default value using this attribute.
         */
        value?: number;
        /**
         * Increment/decrement tick.
         */
        tick?: number;
        /**
         * Hide spinner. Default value is false.
         */
        showSpinner?: boolean;
        /**
         * Disable widget. Default value is false.
         */
        disabled?: boolean;
        /**
         * Minimum value of control can be set using this property;
         */
        minValue?: number;
        /**
         * Maximum value of control can be set using this property;
         */
        maxValue?: number;
        /**
         * Spinner position can be set using this property;
         */
        spinnerPosition?: SpinnerPosition;
        /**
         * Spinner button size property. In case of left-right buttons this parameter will be applied to width and in other cases it will affet the height of the spinner buttons;
         */
        spinnerSize?: string;
        /**
         * Called when value being set is invalid.
         */
        onInvalidValue?: (value: string) => number;
        /**
         * Custom NumericUpDown handler
         */
        model?: INumericUpDownModel;
        /**
         * Toolbar hide/show property. Default value is false.
         */
        showToolBar?: boolean;
        /**
         * Top tool bar
         */
        topToolBar?: any[];
        /**
         * Bottom tool bar
         */
        bottomToolBar?: any[];
        /**
         * Spin enable/disable property. Default value is true.
         */
        spinModeEnabled?: boolean;
        /**
         * Up Icon name;
         */
        upIconName?: string;
        /**
         * Down Icon name;
         */
        downIconName?: string;
        /**
         * Set NumericUpDown text field font size.
         */
        fontSize?: string;
        /**
         * Set toolbar button font size.
         */
        toolbarFontSize?: string;
        /**
         * Set toolbar height.
         */
        toolbarHeight?: string;
        /**
         * Enalbe/disable increment/decrement. Disables spinner buttons and keyboard key up/down. Default value is false.
         */
        spinnerDisabled?: boolean;
        /**
         * This event will be called if custom modifiers support is enabled. Sends key of pressed key and parsed value of text in text box.
         * Current value can be changed to anything using multiplier and set to the NumericUpDown using value attribute of element.
         * @param key String representation of keyboard key.
         * @param textBoxValue It will give parsed value.
         */
        onModifierKeyPress?: (key: string, textBoxValue: number) => boolean | number;
        /**
         * NumericUpDown's textbox value can be changed using this method. Value will get commited on next commit event (Tab, Enter, etc)
         * @deprecated
         */
        changeTextBoxValue?: Function;
        /**
         * Placeholder text to display in textbox. By default it is empty.
         */
        placeholder?: string;
        /**
         * Callback fired after user commits the view value into the model value by pressing "tab" or "enter" key.
         */
        onValueCommit?: Function;
        /**
         * Placeholder alignment can be changed using this attribute. Possible values left/right/start/center/end.
         */
        placeholderAlign?: string;
        /**
         * Returns current text displayed in textbox.
         */
        getDisplayText: () => string;
        /**
         * Does increment/decrement operation based on tick mode received.
         * @param tickMode
         * @param sendCommitCallbackEvent
         */
        updateTick: (tickMode: UpdateTickMode, sendCommitCallbackEvent?: boolean) => void;
        /**
         * Message to be displayed in tooltip when control enters in error/warning state.
         */
        validationMessage: string;
        /**
         * Application can set error/warning/valid state to control based on data it has.
         */
        validationState: ionweb.validation.ValidationState;
        /**
         * tabindex.
         */
        tabindex?: number;
        /**
         * Application can choose whether they want default modifiers.
         */
        useDefaultModifiers: boolean;
        /**
         * Set autofocus on input after initialization
         */
        autofocus: boolean;
    }
    /**
     * The numeric up-down options.
     * @deprecated Please use the ISafeNumericUpDownScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface INumericUpDownScope extends ISafeNumericUpDownScope, ng.IScope {
    }
    interface INumericUpDownModel {
        coreScope: ISafeNumericUpDownScope;
        /**
         * Implement logic to increment value.
         * @param tick is optional. Application can use coreScope.tick to increment the value by tick. NUD will pass valid tick when toolbar buttons are clicked to increment the value.
         */
        incrementValue(tick?: number): number;
        /**
         * Implement logic to decrement value.
         * @param tick is optional. Application can use coreScope.tick to decrement the value by tick. NUD will pass valid tick when toolbar buttons are clicked to decrement the value.
         */
        decrementValue(tick?: number): number;
        /**
         * Implement logic to check if value is within specified range.
         * @param newValue
         */
        applyValue(newValue: any): number;
        /**
         * Implement logic to parse value.
         * @param value
         */
        parseValue(value: string, validate?: boolean): number;
        /**
         * Implement logic to format value.
         * @param value
         */
        formatValue(value: number): string;
        /**
         * If true, the parseValue callback is only called on commit instead of each single keypress.
         */
        onlyParseValueOnCommit?: boolean;
    }
}
declare namespace ionweb.toolkit {
    /**
     * The Date-Time picker mode.
     */
    enum DateTimePickerMode {
        /**
         * Picker will be opened with only date selection(calander) option visible
         */
        Date = 0,
        /**
         * Picker will be opened with only time selection option visible
         */
        Time = 1,
        /**
         * Picker will be opened with both options visible
         */
        DateTime = 2,
    }
    /**
     * Tag visibility.
     */
    enum TagVisibility {
        /**
         * Tag will be available in entry dropdowns only
         */
        Dropdown = 0,
        /**
         * Tag will be available in tag panels only
         */
        TagPanel = 1,
        /**
         * Tag will be available on Tag as well as Panel
         */
        Both = 2,
    }
    /**
     * Header option property header-options
     */
    interface IDateTimeHeaderOptions {
        /**
         * Title of Picker
         */
        headerTitle: string;
        /**
         * clear selected date of calander
         */
        showClearButton: boolean;
    }
    /**
     * The Date-Picker options
     */
    interface IDatePickerOptions {
        /**
         * Current mode of the datepicker (day|month|year). Can be used to initialize datepicker to specific mode.
         * @default 'day'
         */
        datepickerMode?: string;
        /**
         * Starting day of the week from 0-6 where 0=Sunday and 6=Saturday.
         * @default 0
         */
        startingDay?: number;
        /**
         * Defines the minimum available date.
         * @default null
         */
        minDate?: Date;
        /**
         * Defines the maximum available date.
         * @default null
         */
        maxDate?: Date;
        /**
         * Handler to get state of each day, month & year(disabled/enabled).
         * Application can decide which day/month/year will be not selectable.
         */
        dateDisabled?: (date: Date, mode: string) => boolean;
        /**
         * Callback to know what is current navigation in date-picker.
         * This callback is called when current navigation is changed either by clicking on next/previous buttons or by keyboard shortcuts.
         * It is also called when ng-model value is changed, date-picker is refreshed, selection is changed or any other event which modifies the navigation value.
         * @param date The date object to identify current day/month/year. May be undefined during initialization.
         */
        onNavigate?: (date: Date) => void;
    }
    /**
     * The Time-Picker options
     */
    interface ITimePickerOptions {
        /**
         * Number of hours to increase or decrease when using a button.
         * @default 1
         */
        hourStep?: number;
        /**
         * Number of minutes to increase or decrease when using a button.
         * @default 1
         */
        minuteStep?: number;
        /**
         * Whether to display 12H or 24H mode.
         * @default true
         */
        showMeridian?: boolean;
        /**
         * Meridian labels based on locale. To override you must supply an array like ['AM', 'PM'].
         * @default null
         */
        meridians?: string[];
        /**
         * Whether the user can type inside the hours & minutes input.
         * @default false
         */
        /**
         * Whether the user can scroll inside the hours & minutes input to increase or decrease it's values.
         * @default true
         */
        mousewheel?: boolean;
        /**
         * Whether seconds field should be shown in the time-picker.
         * @default false
         */
        showSeconds?: boolean;
        /**
         * Number of seconds to increase or decrease when using up/down buttons
         * @default 1
         */
        secondStep?: number;
    }
    /**
     * The Date-Time picker options
     */
    interface IDateTimePickerOptions {
        /**
         * Date picker options
         */
        datepickerOptions?: IDatePickerOptions;
        /**
         * Time picker options.
         */
        timepickerOptions?: ITimePickerOptions;
        /**
         * Number of column for tags
         */
        numberOfTagColumns?: number;
        /**
         * Application can enable/disable using date time tags using this API.
         */
        useDateTimeTags?: boolean;
        /**
         * Tags that will be displayed on UI.
         */
        dateTimeTags?: IDateTimeTag[];
        /**
         * Set text to display as header for tags panel.
         */
        tagsHeaderText?: string;
        /**
         * show/hide tag panel. default false
         */
        hideTagPanel?: boolean;
    }
    /**
     * The Date-Time Picker.
     */
    interface IDateTimePicker {
        /**
         * Navigate to give date or tag.
         * If given date is out of range then it will navigate to today, minDate or maxDate if set.
         * This have no effect in case current navigation date's month and day is same as given date's month and day.
         * @param date The date or tag to which date picker should navigate.
         */
        navigateToDate?: (date: Date | IDateTimeTag) => void;
    }
    /**
     * The Date-Time picker interface
     */
    interface ISafeDateTimePickerScope extends ng.ISafeScope, IDateTimePickerOptions {
        /**
         * Date-Time picker mode.
         * @default DateTimePickerMode.DateTime
         */
        mode?: DateTimePickerMode;
        /**
         * Refresh date-time-picker.
         */
        refresh?: () => void;
        /**
         * The Date-Time picker.
         */
        onBind?: (dateTimePicker: IDateTimePicker) => void;
        /**
         * Enable compact layout. Applicable for DateTimePickerMode.Date mode only.
         */
        compact?: boolean;
        /**
         * Header Panel Options.
         */
        headerOptions: IDateTimeHeaderOptions;
    }
    /**
     * The Date-Time picker interface
     * @deprecated Please use ISafeDateTimePickerScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDateTimePickerScope extends ng.IScope, ISafeDateTimePickerScope {
    }
    /**
     * The tag style options
     */
    interface IDateTimeTagStyle {
        /**
         * Predefined color set  available in sdk. No need to provide individual color/backgroundcolor in this case
         */
        paletteColor?: string;
        /**
         * The foreground color for tag.
         */
        color?: string;
        /**
         * The background color for tag.
         */
        backgroundColor?: string;
        /**
         * The font style bold or normal.
         */
        fontWeight?: string;
    }
    /**
     * The Date-Time-Tag interface
     */
    interface IDateTimeTag extends IPanelTag {
        /**
         * Date associated with tag.
         */
        date: Date;
    }
    /**
     * IPanel tag contains all display and style related property used for displaying in panel
     */
    interface IPanelTag {
        /**
         * Tag label
         */
        name: string;
        /**
         * Tag visibility.
         */
        visibility?: TagVisibility;
        /**
         * Tag style options.
         */
        style?: IDateTimeTagStyle;
        /**
         * The number of columns across which to span the tag in tags panel.
         * Valid value ranges from 1 to 4, i.e. the tag can span over 1 to 4 columns max, clamped to number-of-tag-columns.
         * default is 1.
         */
        colSpan?: number;
        /**
         * User can provide tooltip which will be visible on hovering
         */
        tooltip?: string;
    }
}
declare namespace ionweb.toolkit {
    interface ISafeDateTimePickerPopup extends ISafeDateTimePickerScope {
        /**
         * Determine whether popup is opened or closed
         * @default false
         */
        isOpen?: boolean;
        /**
         * Close popup on date selection
         * @default true
         */
        closeOnDateSelection?: boolean;
        /**
         * Open popup on Keydown
         * @default true
         */
        showPopupOnKeydown?: Boolean;
    }
    /**
     * @deprecated Please use ISafeDateTimePickerPopup instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDateTimePickerPopup extends ISafeDateTimePickerPopup, IDateTimePickerScope {
    }
}
declare namespace ionweb.toolkit {
    /**
     * Contains headers for individual to and from date pickers
     */
    interface IRangeHeaderOptions {
        from: IDateTimeHeaderOptions;
        to: IDateTimeHeaderOptions;
    }
    /**
     * The range object.
     */
    interface IDateTimeRange {
        /**
         * The "from" date.
         */
        fromDate?: Date | IDateTimeTag;
        /**
         * The "to" date.
         */
        toDate?: Date | IDateTimeTag;
    }
    /**
     * The range tag.
     */
    interface IDateTimeRangeTag extends IDateTimeRange, IPanelTag {
    }
    /**
     * The Date-Time Range picker.
     */
    interface IDateTimeRangePicker {
        /**
         * Navigate to give range.
         * If given range is out of range then it will navigate to today, minDate or maxDate if set.
         * @param range The range to which date picker should navigate.
         */
        navigateToRange?: (range: IDateTimeRange) => void;
    }
    /**
     * The Date-Time Range Picker
     */
    interface ISafeDateTimeRangePickerScope extends ng.ISafeScope {
        /**
         * Date-Time-Range picker mode.
         * @default DateTimePickerMode.DateTime
         */
        mode?: DateTimePickerMode;
        /**
         * Options for "from" date-time-picker.
         */
        fromDateTimePickerOptions?: IDateTimePickerOptions;
        /**
         * Options for "to" date-time picker.
         */
        toDateTimePickerOptions?: IDateTimePickerOptions;
        /**
         * Refresh the date-time range picker.
         */
        refresh?: Function;
        /**
         * The Date-Time Range picker.
         */
        onBind?: (dateTimeRangePicker: IDateTimeRangePicker) => void;
        /**
         * Reduce margin, padding and buttons size to make datetime picker smaller.
         */
        compact?: boolean;
        /**
         * The Date-Time Range tags.
         */
        dateTimeRangeTags?: IDateTimeRangeTag[];
        /**
         * Number of columns in Range Panel.
         */
        numberOfRangeTagColumns?: number;
        /**
         * Application can enable/disable range tags using this API.
         */
        useRangeTags?: boolean;
        /**
         * show hide range tag panel.by default false
         */
        hideRangeTagPanel?: boolean;
        /**
         * Set text to display as header for range tag panel.
         */
        rangeTagsHeaderText?: string;
        /**
         * Header Panel Options.
         */
        headerOptions?: IRangeHeaderOptions;
    }
    /**
     * The Date-Time Range Picker
     * @deprecated Please use ISafeDateTimeRangePickerScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDateTimeRangePickerScope extends ISafeDateTimeRangePickerScope, ng.IScope {
    }
}
declare namespace ionweb.toolkit {
    interface IDateTimePickerHelper {
        /**
         * Compares the date1 with date2 as per the mode.
         * @param date1 The first date object to compare.
         * @param date2 The second date object to compare.
         * @param mode Consider Date, Time or both details while comparing. Default is DateTime.
         * If mode is Date then only date is compared, if mode is Time then only time is compared else date and time both are compared.
         * @param comparisonLevel While comparing time,hours and minutes are compared.For further comparison( e.g seconds), use enum TimeComparisonLevel.
         * @returns 0 in case both are same, positive value if date1 is greater than date 2 else negative value.
         */
        compare(date1: Date, date2: Date, mode: DateTimePickerMode, comparisonLevel?: TimeComparisonLevel): number;
        /**
         * Check if given date is a date-time tag or just a date.
         * @param date The Date or IDateTimeTag object to check.
         */
        isDateTimeTag(date: Date | IDateTimeTag): date is IDateTimeTag;
        /**
         * Get the date from date or date-time tag.
         * @param date The date or IDateTimeTag object.
         * @returns Date If @param date is Date or date from IDateTimeTag.
         */
        dateFromDateTimeTag(date: Date | IDateTimeTag): Date;
        /**
         * Get the date-time tag for given date.
         * @param tags The list of date-time tags to search within.
         * @param date The date to search for.
         * @param mode The Consider Date, Time or both details while comparing. Default is DateTime.
         * If mode is Date then only date is compared, if mode is Time then only time is compared else date and time both are compared.
         * @param comparisonLevel While comparing time,hours and minutes are compared.For further comparison( e.g seconds), use enum TimeComparisonLevel.
         */
        dateTimeTagFromDate(tags: IDateTimeTag[], date: Date, mode: DateTimePickerMode, comparisonLevel?: TimeComparisonLevel): IDateTimeTag;
        /**
         * Reverses the from and to date of IDateTimeRange if from date is greater than to date.
         * @param range The date-time range object.
         * @param mode The Consider Date, Time or both details while comparing. Default is DateTime.
         * If mode is Date then only date is compared, if mode is Time then only time is compared else date and time both are compared.
         * @param comparisonLevel While comparing time,hours and minutes are compared.For further comparison( e.g seconds), use enum TimeComparisonLevel.
         */
        sortRange(range: IDateTimeRange, mode: DateTimePickerMode, comparisonLevel?: TimeComparisonLevel): IDateTimeRange;
        /**
         * Get the date-time range tag for given from and to date's.
         * @param tags The list of date-time range tags to search within.
         * @param fromDate The from date to search from.
         * @param toDate The to date to search for.
         * @param mode The Consider Date, Time or both details while comparing. Default is DateTime.
         * If mode is Date then only date is compared, if mode is Time then only time is compared else date and time both are compared.
         * @param comparisonLevel While comparing time,hours and minutes are compared.For further comparison( e.g seconds), use enum TimeComparisonLevel.
         */
        rangeTagFromDates(tags: IDateTimeRangeTag[], fromDate: Date, toDate: Date, mode: DateTimePickerMode, fromDateComparisonLevel?: TimeComparisonLevel, toDateComparisonLevel?: TimeComparisonLevel): IDateTimeRangeTag;
        /**
         * Get the from and to date from given date-time range tag.
         * @param tag The date-time range tag.
         */
        getDatesFromRangeTag(tag: IDateTimeRangeTag): {
            fromDate: Date;
            toDate: Date;
        };
        /**
         * Formats date to short date or short date + short time or short time using ionweb.dateFormattingService.
         * @param date The date or tag object for creating formatted date string.
         * @param mode The date-time-picker mode according to which formatted date is created.
         * @returns {string} The formatted date-time string.
         */
        formattedDate(date: Date | IDateTimeTag, mode: DateTimePickerMode): string;
    }
    /**
     * While comparing time,hours and minutes are compared.For further comparison( e.g seconds), use enum TimeComparisonLevel
     */
    enum TimeComparisonLevel {
        /**
         * Compare hours, minutes and seconds.
         */
        Seconds = 1,
    }
    class DateTimePickerHelper implements IDateTimePickerHelper {
        protected dateFormattingService: IDateFormattingService;
        constructor(dateFormattingService?: IDateFormattingService);
        private compareDate(date1, date2);
        private compareTime(date1, date2, comparisonLevel?);
        private compareDateTime(date1, date2, comparisonLevel?);
        sortRange(range: IDateTimeRange, mode: DateTimePickerMode, comparisonLevel?: TimeComparisonLevel): IDateTimeRange;
        compare(date1: Date, date2: Date, mode: DateTimePickerMode, comparisonLevel?: TimeComparisonLevel): number;
        isDateTimeTag(date: Date | IDateTimeTag): date is IDateTimeTag;
        dateFromDateTimeTag(date: Date | IDateTimeTag): Date;
        dateTimeTagFromDate(tags: IDateTimeTag[], date: Date, mode: DateTimePickerMode, comparisonLevel?: TimeComparisonLevel): IDateTimeTag;
        rangeTagFromDates(tags: IDateTimeRangeTag[], fromDate: Date, toDate: Date, mode: DateTimePickerMode, fromDatecomparisonLevel?: TimeComparisonLevel, toDateComparisonLevel?: TimeComparisonLevel): IDateTimeRangeTag;
        getDatesFromRangeTag(tag: IDateTimeRangeTag): {
            fromDate: Date;
            toDate: Date;
        };
        formattedDate(date: Date | IDateTimeTag, mode: DateTimePickerMode, useLongFormat?: boolean, customFormatter?: (d: Date) => string): string;
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    interface ISafeDateTimeEntryBoxScope extends ISafeDateTimePickerPopup {
        /**
         * The placeholder text for entry-box.
         */
        placeholder?: string;
        /**
         * Disable Date-Time Entry Box. false by default.
         */
        disabled?: boolean;
        /**
         * Show or hide clear button. true by default.
         */
        showClearButton?: boolean | VisibilityType;
        /**
         * Callback method which will be called when value is changed.
         * @param value The user entered/selected raw values .
         * @returns value parsed by application, else undefined for SDK to parse.
         */
        onValueUpdate?: (value: string) => Date | IDateTimeTag | ng.IPromise<Date | IDateTimeTag>;
        /**
         * Callback method which will be called when ng-model value is changed.
         * @param changedDate The changed date.
         * @param defaultFormattedDate The default formatted value which will be shown is entry-box.
         * @returns Formatted string which should be shown in entry-box, else undefined to show defaultFormattedValue.
         */
        onDateUpdated?: (changedDate: Date | IDateTimeTag, defaultFormattedDate: string) => string;
        /**
         * Display selected tag inline once set to true. Default is false
         */
        showTagInline?: boolean;
        /**
         * Provide custom style for tag which will be displayed inline in entrybox
         * Default will be taken from provided tag style if not implemented or returned undefined
         */
        styleForInlineTag?: (tag: IDateTimeTag) => IDateTimeTagStyle;
        /**
         * Message to be displayed in tooltip when control enters in error/warning state.
         */
        validationMessage?: string;
        /**
         * Application can set error/warning/valid state to control based on data it has.
         */
        validationState?: validation.ValidationState;
        /**
         * tabindex
         */
        tabindex?: number;
        /**
         * Show/Hide dropdown arrow. Default true. Arrow will be shown when
         * both showArrowButton and useDateTimeTags are set to true.
         */
        showArrowButton?: boolean | VisibilityType;
    }
    /**
     * @deprecated Please use ISafeDateTimeEntryBoxScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDateTimeEntryBoxScope extends ISafeDateTimeEntryBoxScope, IDateTimePickerPopup {
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    /**
     * The Date-Time Range Picker Popup.
     */
    interface ISafeDateTimeRangePickerPopupScope extends ISafeDateTimeRangePickerScope {
        /**
         * Determine whether popup is opened or closed
         * @default false
         */
        isOpen?: boolean;
        /**
         * Open popup on Keydown
         * @default true
         */
        showPopupOnKeydown?: Boolean;
    }
    /**
     * The Date-Time Range Picker Popup.
     * @deprecated Please use ISafeDateTimeRangePickerPopupScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDateTimeRangePickerPopupScope extends IDateTimeRangePickerScope, ISafeDateTimeRangePickerPopupScope {
    }
}
declare namespace ionweb.toolkit {
    /**
     * The Date-Time Range Picker Entry-Box
     */
    interface ISafeDateTimeRangePickerEntryBoxScope extends ISafeDateTimeRangePickerPopupScope {
        /**
         * The placeholder text for entry-box.
         */
        placeholder?: string;
        /**
         * Callback method which will be called when ng-model value is changed.
         * @param changedRange The changed date-range.
         * @param formattedRange The default formatted value which will be shown is entry-box.
         * @returns Formatted string which should be shown in entry-box, else undefined to show formattedRange.
         */
        onRangeUpdated?: (changedRange: IDateTimeRange, formattedRange: string) => string;
        /**
         * Disable Date-Time Range Entry Box. false by default.
         */
        disabled?: boolean;
        /**
         * Show or hide clear button. true by default.
         */
        showClearButton?: boolean | VisibilityType;
        /**
         * User can type on input box to select the value. true by default.
         */
        editable?: boolean;
        /**
         * Message to be displayed in tooltip when control enters in error/warning state.
         */
        validationMessage?: string;
        /**
         * Application can set error/warning/valid state to control based on data it has.
         */
        validationState?: ionweb.validation.ValidationState;
        /**
         * tabindex
         */
        tabindex?: number;
        /**
         * Show/Hide dropdown arrow. Default true. Arrow will be shown when
         * both showArrowButton and useRangeTags are set to true.
         */
        showArrowButton?: boolean | VisibilityType;
    }
    /**
     * The Date-Time Range Picker Entry-Box
     * @deprecated Please use ISafeDateTimeRangePickerEntryBoxScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface IDateTimeRangePickerEntryBoxScope extends ISafeDateTimeRangePickerEntryBoxScope, IDateTimeRangePickerPopupScope {
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    /**
     * Represents the banner configuration
     */
    interface IBannerConfig {
        /**
         * Whether we are in edit mode.
         */
        editMode: boolean;
        /**
         * Whether the primary and secondary text should be place on the same line (ignored when there's an arc progress)
         */
        textOnSingleLine: boolean;
        /**
         * Whether the progress should be placed befor the primary and secondary text.
         */
        progressBeforeText: boolean;
        /**
         * Whether users can edit the background color.
         */
        canEditBackgroundColor: boolean;
        /**
         * The header config module.
         */
        header: IBannerTextConfig;
        /**
         * The primary text config module.
         */
        primary: IBannerTextConfig;
        /**
         * The secondary text config module.
         */
        secondary: IBannerTextConfig;
        /**
         * The progress module.
         */
        progress: IBannerProgressConfig;
        /**
         * Overrides the user BG color choice with a temporary color.
         * Supports theme colors.
         */
        backgroundColorOverride?: string;
    }
    /**
     * Represents the whole banner user-editable data.
     */
    interface IBannerModel {
        /**
         * The banner background color. Supports theme colors.
         */
        backgroundColor?: string;
        /**
         * The banner header
         */
        header?: IBannerTextModel;
        /**
         * The banner primary text.
         */
        primary?: IBannerTextModel;
        /**
         * The banner secondary text.
         */
        secondary?: IBannerTextModel;
        /**
         * The banner progress indicator.
         */
        progress?: IBannerProgressModel;
    }
    /**
     * Represents the generic banner content configuration
     */
    interface IBannerContentConfig {
        /**
         * Whether to show this module.
         */
        show: boolean;
        /**
         * Whether the user can edit color.
         */
        canEditColor: boolean;
        /**
         * Whether the user can edit size
         */
        canEditSize: boolean;
        /**
         * Overrides the user color choice with a temporary color.
         * Supports theme colors.
         */
        colorOverride?: string;
    }
    /**
     * The text alignment for the selected element
     */
    enum BannerTextAlignment {
        /**
         * Left aligned text
         */
        Left = 0,
        /**
         * Center aligned text
         */
        Center = 1,
        /**
         * Right aligned text
         */
        Right = 2,
    }
    /**
     * Represents a banner text element user-editable data.
     */
    interface IBannerTextModel {
        /**
         * The text content
         */
        content: string;
        /**
         * The text size, in pixels.
         */
        size: number;
        /**
         * The text alignment.
         */
        alignment: BannerTextAlignment;
        /**
         * The text color. Supports theme colors.
         */
        color: string;
        /**
         * Whether the text should wrap.
         */
        wrap: boolean;
        /**
         * Optional additional custom CSS classes to add to the text element (undefined if none)
         */
        classes?: string[];
    }
    /**
     * Represents a banner text module configuration.
     */
    interface IBannerTextConfig extends IBannerContentConfig {
        /**
         * Whether users can edit content.
         */
        canEditContent: boolean;
        /**
         * Whether users can edit aligment.
         */
        canEditAlignment: boolean;
        /**
         * Whether users can edit wrap.
         */
        canEditWrap: boolean;
    }
    /**
     * The banner progress type
     */
    enum BannerProgressType {
        /**
         * Linear progress type.
         */
        Linear = 0,
        /**
         * Arc progress type
         */
        Arc = 1,
        /**
         * Round progress type
         */
        Round = 2,
    }
    /**
     * Represents a banner progress element user-editable data.
     */
    interface IBannerProgressModel {
        /**
         * The progress size.
         */
        size: number;
        /**
         * The progress color
         */
        color: string;
    }
    /**
     * Represents a banner progress module configuration.
     */
    interface IBannerProgressConfig extends IBannerContentConfig {
        /**
         * This module's current value (should be > 0)
         */
        value: number;
        /**
         * This module's maximum value (should be > 0)
         */
        maxValue: number;
        /**
         * The progress type, arc or linear.
         */
        type: BannerProgressType;
    }
    /**
     * Service to help banner creation (name ionweb.bannerService)
     */
    interface IBannerService {
        /**
         * Gets a default full model.
         */
        getDefaultModel(): IBannerModel;
        /**
         * Gets a default text module config.
         */
        getDefaultTextConfig(): IBannerTextConfig;
        /**
         * Gets a default progress module config.
         */
        getDefaultProgressConfig(): IBannerProgressConfig;
        /**
         * Gets the default full config.
         */
        getDefaultConfig(): IBannerConfig;
    }
    /**
     * A static class holding useful static methods used to initialize the BANNER directive.
     * @deprecated Please use the banner service (IBannerService, ionweb.bannerService)
     */
    class Banner {
        /**
         * Gets a default full model.
         * @deprecated Please use the banner service (IBannerService, ionweb.bannerService)
         */
        static getDefaultModel(): IBannerModel;
        /**
         * Gets a default text module config.
         * @deprecated Please use the banner service (IBannerService, ionweb.bannerService)
         */
        static getDefaultTextConfig(): IBannerTextConfig;
        /**
         * Gets a default progress module config.
         * @deprecated Please use the banner service (IBannerService, ionweb.bannerService)
         */
        static getDefaultProgressConfig(): IBannerProgressConfig;
        /**
         * Gets the default full config.
         * @deprecated Please use the banner service (IBannerService, ionweb.bannerService)
         */
        static getDefaultConfig(): IBannerConfig;
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    /**
     * object to set additional options (icon) on collapsible pane.
     */
    interface ICollapsiblePaneSettings {
        /**
         * Name of the Icon to be shown.
         */
        icon?: string;
        /**
         * Is icon visible.
         */
        visible?: boolean;
        /**
         * Handler to be called when icon is clicked.
         */
        clickHandler?: (event: JQueryEventObject) => void;
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb {
    /**
     * Service to export a file/content. Service name: ionweb.fileExportService
     */
    interface IFileExportService {
        /**
         * Make the browser to save a file.
         */
        exportFile(content: string | Blob, fileType: string, name: string): void;
    }
}
declare namespace ionweb.toolkit {
    /**
     *Enum for Tile Type
     */
    enum TileType {
        Square = 0,
        Rectangle1 = 1,
        Rectangle2 = 2,
    }
    /**
     *Enum for Tile Feedback Status
     */
    enum TileFeedbackStatus {
        Error = 0,
        Warning = 1,
        Info = 2,
        Custom = 3,
    }
    /**
     *Enum for Tile States
     */
    enum TileState {
        Normal = 0,
        Selected = 1,
        Disabled = 2,
    }
    /**
     *Enum for Tile Icon position
     */
    enum IconPosition {
        Left = 0,
        Right = 1,
        Top = 2,
        Bottom = 3,
        Center = 4,
    }
    /**
     * Object to define tile options
     */
    interface ITileOptions {
        backgroundColor?: string;
        height?: string;
        width?: string;
        type?: TileType;
        state?: TileState;
        feedbackStatus?: TileFeedbackStatus;
        /**
         * Custom feedback color. Only applicable if feedbackStatus = TileFeedbackStatus.Custom.
         */
        customFeedbackStatusColor?: string;
        /**
         * when enabled, Tile will be flashed whenever Primary or Secondary text of Tile is changed.
         */
        enableFlashingOnTextChange?: boolean;
    }
    /**
     * Object to define tile text options
     */
    interface ITextOptions {
        text: string;
        backgroundColor?: string;
        foregroundColor?: string;
    }
    /**
     * Object to define tile icon options
     */
    interface IIconOptions {
        icon: string;
        position?: IconPosition;
    }
    /**
     * Object to define tile event options
     */
    interface ITileEvents {
        onLeftClick?: () => void;
        onRightClick?: () => void;
    }
    /**
     * Tile custom content
     */
    interface ITileCustomContent {
        template?: string;
        templateUrl?: string;
        scope?: ng.ISafeScope;
    }
    /**
     * Object to define tile attributes
     */
    interface ISafeTileScope extends ng.ISafeScope {
        /**
         * Provide basic values of tile
         */
        tileOptions?: ITileOptions;
        /**
         * Object for primary text and its properties
         */
        primaryTextOptions: ITextOptions;
        /**
         * Object for primary text and its properties
         */
        secondaryTextOptions?: ITextOptions;
        /**
         * Object for icon and its position
         */
        iconOptions?: IIconOptions;
        /**
         * Object for all tile events
         */
        tileEvents: ITileEvents;
        /**
         * Custom content displayed in tile instead of default content(icon, primary & secondary text)
         */
        customContent: ITileCustomContent;
        /**
         * Optional callback to obtain a reference to the tile object.
         */
        onBound?: (tile: ITile) => void;
    }
    /**
     * Object to define tile attributes
     * @deprecated Please use the ISafeTileScope instead, to allow compilation errors to be spotted in case of undeclared properties.
     */
    interface ITileScope extends ISafeTileScope, ng.IScope {
    }
    interface ITile {
        /**
         * give flashing effect to tile.
         */
        flash(): void;
    }
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
}
declare namespace ionweb.toolkit {
    /**
     * enum for visibility of buttons, icons, etc of toolkit controls.
     */
    enum VisibilityType {
        /**
         * hide the button/icon.
         */
        Never = 0,
        /**
         * Always show the button/icon.
         */
        Always = 1,
        /**
         * Show button/icon only when control is hovered/focused.
         */
        OnHover = 2,
    }
}
/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
interface JQuerySupport {
    touch: boolean;
}
